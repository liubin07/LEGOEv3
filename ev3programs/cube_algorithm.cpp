#include <sstream>
#include <iostream>

#include "cube_algorithm.h"

const string cube_algorithm::err_prefix = "Solve Error:";

//const int cube_algorithm::CHAROFFSET = 65;
// RLFBUD is the face order used for input, so that a correctly oriented
// piece in the input has its 'highest value' facelet first. The rest of the
// program uses moves in FBRLUD order.
// input:  UF UR UB UL  DF DR DB DL  FR FL BR BL  UFR URB UBL ULF   DRF DFL DLB DBR
//         A  B  C  D   E  F  G  H   I  J  K  L   M   N   O   P     Q   R   S   T   
//         A  E  C  G   B  F  D  H   I  J  K  L   M   S   N   T     R   O   Q   P
// intrnl: UF DF UB DB  UR DR UL DL  FR FL BR BL  UFR UBL DFL DBR   DLB DRF URB ULF
const char* cube_algorithm::order = "AECGBFDHIJKLMSNTROQP";
// intrnl: UF DF UB DB  UR DR UL DL  FR FL BR BL  UFR UBL DFL DBR   DLB DRF URB ULF
// bithash:20,36,24,40, 17,33,18,34, 5, 6, 9, 10, 21, 26, 38, 41,   42, 37, 25, 22
const char* cube_algorithm::bithash = "TdXhQaRbEFIJUZfijeYV";
// Each move consists of two 4-cycles. This string contains these in FBRLUD order.
// intrnl: UF DF UB DB  UR DR UL DL  FR FL BR BL  UFR UBL DFL DBR   DLB DRF URB ULF 
//         A  B  C  D   E  F  G  H   I  J  K  L   M   N   O   P     Q   R   S   T  
const char* cube_algorithm::perm = "AIBJTMROCLDKSNQPEKFIMSPRGJHLNTOQAGCEMTNSBFDHORPQ";

const char cube_algorithm::val[20] = {2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3};
// input:                             UF     UR     UB     UL    DF     DR     DB     DL    FR     FL    BR     BL    UFR       URB       UBL      ULF      DRF       DFL      DLB      DBR
const int cube_algorithm::imap[48] = {53,15, 51,24, 49,44, 47,6, 29,11, 31,20, 33,40, 35,2, 17,22, 13,8, 42,26, 38,4, 52,16,23, 50,25,43, 48,37,5, 46,7,14, 30,21,10, 28,12,1, 34,3,39, 32,41,19};
const int cube_algorithm::order_r[4] = {0, 4, 1, 5};
const int cube_algorithm::order_s[4] = {0, 2, 1, 3};

const char cube_algorithm::table0[] = {1};
const char cube_algorithm::table1[] = {1,0,0,5,0,6,5,0,0,5,6,0,5,0,0,7,0,4,4,0,4,0,0,5,4,0,0,6,0,5,6,0,0,4,4,0,4,0,0,6,4,0,0,5,0,6,5,0,5,0,0,5,0,6,5,0,0,5,6,0,5,0,0,7,0,4,4,0,4,0,0,5,4,0,0,6,0,5,6,0,5,0,0,4,0,6,5,0,0,5,6,0,4,0,0,7,5,0,0,4,0,6,5,0,0,5,6,0,4,0,0,7,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,0,4,4,0,4,0,0,6,4,0,0,5,0,6,5,0,5,0,0,4,0,6,5,0,0,5,6,0,4,0,0,7,5,0,0,4,0,6,5,0,0,5,6,0,4,0,0,7,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,5,0,6,5,0,0,5,6,0,5,0,0,7,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,7,0,0,7,0,7,7,0,0,7,7,0,7,0,0,5,0,5,5,0,4,0,0,5,4,0,0,5,0,6,6,0,4,0,0,4,0,5,4,0,0,5,5,0,5,0,0,6,4,0,0,4,0,5,5,0,0,4,5,0,5,0,0,6,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,4,0,0,3,0,5,4,0,0,4,5,0,4,0,0,6,0,5,4,0,5,0,0,6,5,0,0,6,0,6,6,0,0,4,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,7,7,0,0,7,7,0,7,0,0,6,4,0,0,3,0,5,4,0,0,4,5,0,4,0,0,6,0,5,4,0,5,0,0,6,5,0,0,6,0,6,6,0,0,4,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,7,7,0,0,7,7,0,7,0,0,6,0,4,4,0,5,0,0,5,5,0,0,5,0,5,5,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,7,7,0,7,0,0,6,7,0,0,6,0,6,6,0,0,5,5,0,4,0,0,5,4,0,0,5,0,6,6,0,4,0,0,3,0,5,4,0,0,4,5,0,4,0,0,6,4,0,0,3,0,5,4,0,0,4,5,0,4,0,0,6,0,4,4,0,5,0,0,5,5,0,0,5,0,5,5,0,4,0,0,4,0,5,4,0,0,5,5,0,5,0,0,6,0,5,4,0,5,0,0,6,5,0,0,6,0,6,6,0,0,5,4,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,4,0,0,4,0,5,5,0,0,4,5,0,5,0,0,6,0,4,5,0,5,0,0,6,5,0,0,6,0,6,6,0,0,4,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,7,7,0,0,7,7,0,7,0,0,6,5,0,0,6,0,7,7,0,0,7,7,0,7,0,0,6,0,7,7,0,7,0,0,6,7,0,0,6,0,6,6,0,5,0,0,2,0,4,3,0,0,3,4,0,4,0,0,6,0,4,3,0,5,0,0,5,4,0,0,5,0,5,5,0,0,3,4,0,4,0,0,5,5,0,0,5,0,5,5,0,4,0,0,6,0,6,6,0,0,6,6,0,6,0,0,6,0,4,3,0,5,0,0,5,4,0,0,5,0,5,5,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,4,0,0,6,0,6,6,0,0,6,6,0,7,0,0,5,0,6,6,0,7,0,0,6,6,0,0,6,0,7,6,0,0,3,4,0,4,0,0,5,5,0,0,5,0,5,5,0,4,0,0,6,0,6,6,0,0,6,6,0,7,0,0,5,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,6,6,0,6,0,0,6,7,0,0,6,0,6,7,0,4,0,0,6,0,6,6,0,0,6,6,0,6,0,0,6,0,6,6,0,7,0,0,6,6,0,0,6,0,7,6,0,0,6,6,0,6,0,0,6,7,0,0,6,0,6,7,0,7,0,0,7,0,6,7,0,0,7,6,0,7,0,0,8,0,4,4,0,5,0,0,6,5,0,0,6,0,5,5,0,4,0,0,5,0,5,5,0,0,4,5,0,4,0,0,6,4,0,0,5,0,5,4,0,0,5,5,0,4,0,0,6,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,4,0,0,4,0,5,4,0,0,4,5,0,3,0,0,6,0,5,5,0,5,0,0,6,4,0,0,6,0,6,6,0,0,5,5,0,4,0,0,6,5,0,0,6,0,6,6,0,5,0,0,7,0,7,7,0,0,7,7,0,6,0,0,6,4,0,0,4,0,5,4,0,0,4,5,0,3,0,0,6,0,5,5,0,5,0,0,6,4,0,0,6,0,6,6,0,0,5,5,0,4,0,0,6,5,0,0,6,0,6,6,0,5,0,0,7,0,7,7,0,0,7,7,0,6,0,0,6,0,5,5,0,4,0,0,5,4,0,0,5,0,5,5,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,7,7,0,7,0,0,6,7,0,0,6,0,6,6,0,6,0,0,4,0,5,5,0,0,5,5,0,4,0,0,6,0,5,5,0,5,0,0,6,5,0,0,5,0,6,5,0,0,5,5,0,5,0,0,5,5,0,0,6,0,5,6,0,6,0,0,6,0,7,7,0,0,7,7,0,6,0,0,6,0,5,5,0,5,0,0,5,5,0,0,5,0,5,5,0,6,0,0,6,0,7,6,0,0,6,6,0,6,0,0,6,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,5,0,7,6,0,7,0,0,7,6,0,0,6,0,7,6,0,0,5,5,0,5,0,0,5,5,0,0,5,0,5,5,0,6,0,0,6,0,7,6,0,0,6,6,0,6,0,0,5,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,6,0,6,7,0,6,0,0,6,7,0,0,7,0,6,7,0,6,0,0,6,0,6,7,0,0,7,6,0,6,0,0,4,0,7,6,0,7,0,0,6,6,0,0,5,0,6,5,0,0,6,7,0,6,0,0,5,7,0,0,6,0,5,6,0,7,0,0,6,0,7,6,0,0,6,7,0,6,0,0,7,5,0,0,3,0,5,4,0,0,4,5,0,3,0,0,6,0,4,4,0,5,0,0,6,4,0,0,5,0,5,5,0,0,4,4,0,4,0,0,5,5,0,0,6,0,5,5,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,5,4,0,4,0,0,5,4,0,0,5,0,6,5,0,5,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,5,0,0,6,0,6,7,0,0,7,6,0,6,0,0,6,0,7,6,0,7,0,0,6,6,0,0,6,0,7,6,0,0,4,5,0,4,0,0,5,4,0,0,5,0,5,6,0,5,0,0,6,0,6,7,0,0,7,6,0,6,0,0,6,5,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,0,6,7,0,6,0,0,6,7,0,0,6,0,6,7,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,7,6,0,7,0,0,7,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,6,7,0,0,7,0,6,6,0,7,0,0,7,0,6,7,0,0,7,6,0,7,0,0,7,0,5,5,0,6,0,0,5,6,0,0,5,0,4,4,0,5,0,0,5,0,6,6,0,0,5,5,0,5,0,0,5,5,0,0,5,0,5,5,0,0,6,6,0,5,0,0,5,0,6,6,0,6,0,0,6,6,0,0,6,0,6,6,0,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,5,0,6,0,0,6,5,0,0,5,0,6,5,0,0,6,6,0,6,0,0,5,6,0,0,6,0,6,6,0,6,0,0,6,0,7,6,0,0,7,6,0,7,0,0,7,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,6,0,6,0,0,6,6,0,0,5,0,6,6,0,0,5,6,0,5,0,0,5,6,0,0,6,0,5,6,0,6,0,0,6,0,6,7,0,0,6,7,0,7,0,0,7,0,6,6,0,6,0,0,5,6,0,0,5,0,5,5,0,6,0,0,6,0,6,6,0,0,6,5,0,6,0,0,7,6,0,0,6,0,5,6,0,0,6,6,0,6,0,0,7,0,6,6,0,6,0,0,8,6,0,0,8,0,7,7,0,0,4,4,0,5,0,0,6,5,0,0,6,0,5,5,0,4,0,0,4,0,5,4,0,0,4,5,0,3,0,0,6,4,0,0,4,0,5,4,0,0,4,5,0,3,0,0,6,0,5,5,0,4,0,0,5,4,0,0,5,0,5,5,0,4,0,0,5,0,5,5,0,0,4,5,0,4,0,0,6,0,5,5,0,5,0,0,6,4,0,0,6,0,6,6,0,0,5,5,0,5,0,0,6,4,0,0,6,0,6,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,4,0,0,5,0,5,4,0,0,5,5,0,4,0,0,6,0,5,5,0,4,0,0,6,5,0,0,6,0,6,6,0,0,5,5,0,4,0,0,6,5,0,0,6,0,6,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,5,5,0,5,0,0,6,5,0,0,6,0,6,6,0,5,0,0,7,0,7,7,0,0,7,7,0,6,0,0,6,5,0,0,7,0,7,7,0,0,7,7,0,6,0,0,6,0,7,7,0,7,0,0,6,7,0,0,6,0,6,6,0,5,0,0,3,0,5,4,0,0,4,5,0,3,0,0,6,0,5,4,0,4,0,0,5,4,0,0,5,0,6,5,0,0,4,5,0,4,0,0,5,4,0,0,5,0,5,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,4,4,0,5,0,0,6,4,0,0,5,0,5,5,0,5,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,5,0,0,6,0,6,7,0,0,7,6,0,6,0,0,6,0,7,6,0,7,0,0,7,6,0,0,6,0,6,6,0,0,4,4,0,4,0,0,5,5,0,0,6,0,5,5,0,5,0,0,6,0,6,7,0,0,7,6,0,6,0,0,6,5,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,0,6,7,0,6,0,0,6,7,0,0,7,0,6,6,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,7,6,0,7,0,0,6,6,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,7,0,0,6,0,6,7,0,7,0,0,7,0,6,7,0,0,7,6,0,7,0,0,7,6,0,0,4,0,5,5,0,0,5,5,0,4,0,0,6,0,5,5,0,5,0,0,5,5,0,0,5,0,5,5,0,0,5,5,0,5,0,0,5,5,0,0,5,0,5,5,0,6,0,0,6,0,6,7,0,0,7,6,0,6,0,0,4,0,5,5,0,5,0,0,6,5,0,0,5,0,6,5,0,6,0,0,6,0,7,6,0,0,6,6,0,6,0,0,6,6,0,0,6,0,7,6,0,0,6,6,0,6,0,0,5,0,7,6,0,7,0,0,6,6,0,0,5,0,6,5,0,0,5,5,0,5,0,0,5,5,0,0,6,0,5,6,0,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,5,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,6,0,6,7,0,6,0,0,5,7,0,0,6,0,5,6,0,6,0,0,6,0,7,7,0,0,7,7,0,6,0,0,6,0,7,6,0,7,0,0,7,6,0,0,6,0,7,6,0,0,6,7,0,6,0,0,6,7,0,0,7,0,6,7,0,7,0,0,6,0,7,6,0,0,6,7,0,6,0,0,7,0,5,5,0,6,0,0,5,6,0,0,5,0,4,4,0,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,6,0,6,0,0,5,6,0,0,5,0,5,5,0,5,0,0,5,0,6,6,0,0,5,5,0,5,0,0,5,0,6,5,0,6,0,0,6,5,0,0,5,0,6,5,0,0,6,6,0,6,0,0,6,6,0,0,5,0,6,6,0,6,0,0,6,0,6,6,0,0,6,5,0,6,0,0,7,5,0,0,5,0,5,5,0,0,6,6,0,5,0,0,5,0,6,6,0,6,0,0,5,6,0,0,6,0,6,6,0,0,5,6,0,5,0,0,5,6,0,0,6,0,5,6,0,6,0,0,6,0,5,6,0,0,6,6,0,6,0,0,7,0,6,6,0,6,0,0,6,6,0,0,6,0,6,6,0,6,0,0,6,0,7,6,0,0,7,6,0,7,0,0,7,6,0,0,6,0,6,7,0,0,6,7,0,7,0,0,7,0,6,6,0,6,0,0,8,6,0,0,8,0,7,7,0,5,0,0,4,0,4,3,0,0,3,4,0,2,0,0,6,0,5,4,0,4,0,0,5,3,0,0,5,0,5,5,0,0,4,5,0,3,0,0,5,4,0,0,5,0,5,5,0,4,0,0,6,0,6,6,0,0,6,6,0,6,0,0,6,0,5,4,0,4,0,0,5,3,0,0,5,0,5,5,0,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,4,0,0,7,0,6,6,0,0,6,6,0,6,0,0,5,0,7,6,0,6,0,0,7,6,0,0,6,0,6,6,0,0,4,5,0,3,0,0,5,4,0,0,5,0,5,5,0,4,0,0,7,0,6,6,0,0,6,6,0,6,0,0,5,5,0,0,6,0,6,6,0,0,6,6,0,6,0,0,5,0,6,7,0,6,0,0,6,6,0,0,7,0,6,6,0,4,0,0,6,0,6,6,0,0,6,6,0,6,0,0,6,0,7,6,0,6,0,0,7,6,0,0,6,0,6,6,0,0,6,7,0,6,0,0,6,6,0,0,7,0,6,6,0,7,0,0,7,0,6,7,0,0,7,6,0,7,0,0,8,0,6,6,0,5,0,0,4,5,0,0,4,0,5,5,0,5,0,0,5,0,6,5,0,0,6,5,0,5,0,0,5,5,0,0,5,0,5,6,0,0,5,6,0,5,0,0,5,0,6,6,0,6,0,0,6,6,0,0,6,0,6,6,0,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,5,0,6,0,0,6,5,0,0,5,0,6,5,0,0,6,6,0,6,0,0,6,6,0,0,6,0,5,6,0,6,0,0,7,0,7,7,0,0,6,6,0,6,0,0,7,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,6,0,6,0,0,6,6,0,0,6,0,6,5,0,0,5,6,0,5,0,0,5,6,0,0,6,0,5,6,0,6,0,0,7,0,6,6,0,0,7,7,0,6,0,0,7,0,6,6,0,6,0,0,5,6,0,0,5,0,5,5,0,6,0,0,6,0,6,6,0,0,6,5,0,6,0,0,7,6,0,0,6,0,5,6,0,0,6,6,0,6,0,0,7,0,6,6,0,6,0,0,7,6,0,0,7,0,8,8,0,0,6,6,0,5,0,0,4,5,0,0,4,0,5,5,0,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,6,0,0,5,0,5,5,0,0,5,5,0,5,0,0,4,0,6,6,0,6,0,0,5,6,0,0,5,0,5,5,0,5,0,0,5,0,6,5,0,0,6,5,0,5,0,0,5,0,6,5,0,6,0,0,6,5,0,0,5,0,6,5,0,0,6,6,0,6,0,0,6,6,0,0,6,0,6,5,0,6,0,0,6,0,6,6,0,0,6,5,0,6,0,0,7,5,0,0,5,0,5,6,0,0,5,6,0,5,0,0,5,0,6,6,0,6,0,0,6,6,0,0,6,0,5,6,0,0,5,6,0,5,0,0,5,6,0,0,6,0,5,6,0,6,0,0,6,0,5,6,0,0,6,6,0,6,0,0,7,0,6,6,0,6,0,0,6,6,0,0,6,0,6,6,0,6,0,0,7,0,7,7,0,0,6,6,0,6,0,0,7,6,0,0,7,0,6,6,0,0,7,7,0,6,0,0,7,0,6,6,0,6,0,0,7,6,0,0,7,0,8,8,0,7,0,0,6,0,6,6,0,0,6,6,0,6,0,0,3,0,6,6,0,6,0,0,5,6,0,0,4,0,5,4,0,0,6,6,0,6,0,0,4,6,0,0,5,0,4,5,0,7,0,0,5,0,6,6,0,0,6,6,0,5,0,0,7,0,6,6,0,6,0,0,5,6,0,0,4,0,5,4,0,7,0,0,6,0,6,5,0,0,5,4,0,6,0,0,7,7,0,0,5,0,5,6,0,0,6,5,0,5,0,0,7,0,6,5,0,6,0,0,7,5,0,0,7,0,7,7,0,0,6,6,0,6,0,0,4,6,0,0,5,0,4,5,0,7,0,0,5,0,5,6,0,0,6,5,0,5,0,0,7,7,0,0,6,0,4,5,0,0,5,6,0,6,0,0,7,0,5,6,0,5,0,0,7,6,0,0,7,0,7,7,0,7,0,0,5,0,6,6,0,0,6,6,0,5,0,0,7,0,6,5,0,6,0,0,7,5,0,0,7,0,7,7,0,0,5,6,0,5,0,0,7,6,0,0,7,0,7,7,0,5,0,0,8,0,7,7,0,0,7,7,0,8,0,0,8};
const char cube_algorithm::table2[] = {1,0,0,0,0,6,0,6,0,0,0,6,0,5,0,7,0,0,0,6,0,7,0,0,0,0,5,0,0,7,0,5,0,6,0,0,0,5,0,5,0,0,0,0,4,6,0,0,0,0,5,0,5,0,0,7,0,6,0,0,0,0,5,6,0,0,0,0,5,0,5,0,0,0,5,0,4,0,5,0,0,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,6,7,0,0,0,0,6,0,7,0,0,5,0,5,0,0,0,0,7,6,0,0,0,0,5,0,6,0,0,0,6,0,6,0,6,0,0,7,0,0,0,0,6,0,6,0,0,0,5,0,5,0,5,0,0,0,5,0,5,0,0,0,0,7,0,6,0,7,0,0,0,0,4,7,0,0,0,0,6,0,6,0,0,0,5,0,7,0,5,0,0,6,0,0,0,0,6,0,6,0,0,0,5,0,6,0,5,0,0,0,6,0,6,0,0,0,0,7,0,0,5,0,6,0,4,0,0,0,5,0,5,0,0,0,0,6,6,0,0,0,0,6,0,6,0,0,0,7,0,6,0,7,0,0,0,5,0,5,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,6,0,5,0,0,0,5,0,5,0,5,0,0,7,0,0,0,0,7,0,6,0,0,0,6,0,6,0,6,0,0,0,5,0,5,0,0,0,0,7,0,4,0,4,0,0,0,0,5,6,0,0,0,0,6,0,6,0,0,0,6,0,7,0,6,0,0,6,0,0,0,0,6,0,6,0,0,0,8,0,6,0,8,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,7,0,6,0,0,0,7,0,6,0,0,0,0,7,5,0,0,0,0,7,0,7,0,6,0,0,0,0,6,0,6,0,0,0,5,0,6,0,4,0,0,0,4,0,5,0,0,0,0,6,0,0,6,0,7,0,5,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,5,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,0,6,0,7,0,6,0,0,0,7,0,6,0,0,0,0,4,6,0,0,0,0,6,0,6,0,0,0,4,0,6,0,5,0,0,7,0,0,0,0,6,0,6,0,0,0,5,0,6,0,5,0,0,0,5,0,5,0,0,0,0,6,0,0,5,0,7,0,5,0,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,6,0,6,0,6,0,0,0,0,6,0,6,0,0,0,5,0,7,0,6,0,0,0,6,0,5,0,0,0,0,7,0,0,4,0,6,0,5,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,5,0,4,0,0,0,0,6,7,0,0,0,0,7,0,7,0,0,0,6,0,7,0,6,0,0,0,0,6,0,3,0,6,0,0,0,4,0,5,0,0,0,0,7,6,0,0,0,0,5,0,6,0,0,5,0,4,0,0,0,0,7,4,0,0,0,0,6,0,6,0,0,0,5,0,7,0,6,0,0,6,0,0,0,0,6,0,5,0,0,0,6,0,7,0,5,0,0,0,7,0,7,0,0,0,0,6,0,0,7,0,6,0,7,0,0,0,6,0,5,0,0,0,0,5,7,0,0,0,0,6,0,5,0,0,6,0,5,0,0,0,0,5,6,0,0,0,0,6,0,5,0,0,0,6,0,5,0,6,0,0,7,0,0,0,0,6,0,5,0,0,0,7,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,0,5,0,4,0,0,0,0,6,5,0,0,0,0,6,0,7,0,0,0,6,0,7,0,6,0,0,4,0,0,0,0,7,0,7,0,0,0,7,0,6,0,7,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,7,0,4,0,0,0,7,0,7,0,0,0,0,6,6,0,0,0,0,7,0,6,0,6,0,0,0,0,6,0,4,0,0,0,6,0,6,0,3,0,0,0,7,0,6,0,0,0,0,7,0,0,5,0,6,0,6,0,0,0,6,0,6,0,0,0,0,7,5,0,0,0,0,8,0,6,0,0,6,0,6,0,0,0,0,7,5,0,0,0,0,6,0,7,0,0,0,6,0,7,0,6,0,0,0,5,0,5,0,0,0,0,6,5,0,0,0,0,7,0,7,0,0,0,6,0,7,0,4,0,0,5,0,0,0,0,7,0,6,0,0,0,7,0,6,0,7,0,0,0,6,0,7,0,0,0,0,6,0,0,6,0,7,0,6,0,0,0,7,0,7,0,0,0,0,7,6,0,0,0,0,7,0,6,0,5,0,0,0,0,7,0,6,0,0,0,6,0,6,0,6,0,0,0,7,0,7,0,0,0,0,6,0,0,6,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,6,0,0,0,0,7,0,6,0,0,7,0,7,0,0,0,0,7,6,0,0,0,0,7,0,6,0,0,0,7,0,6,0,6,0,0,0,0,7,0,6,0,6,0,0,0,6,0,6,0,0,0,0,6,5,0,0,0,0,7,0,7,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,6,0,5,0,0,0,7,0,7,0,7,0,0,6,0,0,0,0,8,0,6,0,0,0,7,0,7,0,7,0,0,0,7,0,7,0,0,0,0,6,7,0,0,0,0,5,0,5,0,0,0,5,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,6,0,3,0,0,0,6,0,7,0,0,0,0,7,4,0,0,0,0,6,0,6,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,8,0,6,0,0,0,6,0,6,0,6,0,0,0,0,6,0,5,0,6,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,8,0,7,0,0,6,0,7,0,0,0,0,5,5,0,0,0,0,6,0,5,0,0,0,7,0,6,0,7,0,0,5,0,0,0,0,6,0,7,0,0,0,7,0,6,0,7,0,0,0,6,0,7,0,0,0,0,6,0,7,0,6,0,0,0,0,7,5,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,5,0,0,0,0,6,0,5,0,0,0,6,0,5,0,7,0,0,0,6,0,6,0,0,0,0,6,0,0,7,0,7,0,7,0,0,0,7,0,7,0,0,0,0,7,8,0,0,0,0,7,0,6,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,6,0,5,0,0,0,5,0,5,0,5,0,0,7,0,0,0,0,6,0,5,0,0,0,7,0,6,0,6,0,0,0,6,0,6,0,0,0,0,6,0,0,5,0,5,0,4,0,0,0,6,0,6,0,0,0,0,6,4,0,0,0,0,7,0,6,0,6,0,0,0,0,5,0,5,0,0,0,7,0,6,0,6,0,0,0,6,0,5,0,0,0,0,6,0,0,6,0,6,0,6,0,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,8,0,6,0,0,3,0,6,0,0,0,0,6,4,0,0,0,0,6,0,7,0,0,0,7,0,7,0,7,0,0,0,0,6,0,4,0,5,0,0,0,3,0,5,0,0,0,0,5,6,0,0,0,0,7,0,6,0,0,5,0,4,0,0,0,0,5,4,0,0,0,0,7,0,6,0,0,0,7,0,7,0,6,0,0,5,0,0,0,0,6,0,7,0,0,0,6,0,6,0,7,0,0,0,5,0,5,0,0,0,0,6,7,0,0,0,0,6,0,4,0,0,0,6,0,7,0,7,0,0,0,3,0,6,0,0,0,0,6,0,0,7,0,6,0,6,0,0,0,6,0,6,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,6,0,5,0,0,0,0,6,5,0,0,0,0,8,0,6,0,0,0,7,0,7,0,7,0,0,0,0,6,0,7,0,7,0,0,0,5,0,6,0,0,0,0,7,5,0,0,0,0,7,0,6,0,0,6,0,5,0,0,0,0,7,7,0,0,0,0,7,0,6,0,0,0,6,0,6,0,7,0,0,5,0,0,0,0,7,0,5,0,0,0,7,0,6,0,7,0,0,0,7,0,7,0,0,0,0,5,0,6,0,6,0,0,0,0,6,5,0,0,0,0,6,0,7,0,0,0,7,0,6,0,7,0,0,6,0,0,0,0,7,0,5,0,0,0,7,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,6,0,5,0,0,0,6,0,5,0,5,0,0,0,5,0,5,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,2,0,5,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,6,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,0,6,0,6,0,0,0,0,5,0,6,0,6,0,0,0,0,6,6,0,0,0,0,7,0,6,0,0,0,6,0,6,0,7,0,0,5,0,0,0,0,5,0,7,0,0,0,6,0,6,0,7,0,0,0,7,0,6,0,0,0,0,6,0,0,6,0,5,0,7,0,0,0,6,0,7,0,0,0,0,7,6,0,0,0,0,6,0,5,0,5,0,0,0,0,7,0,6,0,0,0,6,0,6,0,7,0,0,0,6,0,6,0,0,0,0,6,0,0,6,0,7,0,6,0,0,0,7,0,6,0,0,0,0,4,6,0,0,0,0,6,0,5,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,5,0,4,0,0,0,6,0,6,0,7,0,0,0,0,7,0,6,0,7,0,0,0,5,0,6,0,0,0,0,5,7,0,0,0,0,5,0,6,0,0,5,0,6,0,0,0,0,5,6,0,0,0,0,5,0,6,0,0,0,6,0,6,0,7,0,0,7,0,0,0,0,5,0,6,0,0,0,6,0,5,0,6,0,0,0,7,0,6,0,0,0,0,7,0,5,0,5,0,0,0,0,6,5,0,0,0,0,6,0,7,0,0,0,6,0,7,0,6,0,0,5,0,0,0,0,7,0,7,0,0,0,7,0,6,0,7,0,0,0,7,0,7,0,0,0,0,7,0,0,4,0,7,0,6,0,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,6,0,7,0,7,0,0,0,0,5,0,5,0,0,0,3,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,6,0,5,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,6,0,8,0,0,7,0,6,0,0,0,0,7,4,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,0,4,0,5,0,0,0,0,6,4,0,0,0,0,7,0,7,0,0,0,4,0,7,0,6,0,0,5,0,0,0,0,7,0,6,0,0,0,7,0,6,0,7,0,0,0,7,0,7,0,0,0,0,6,0,0,6,0,7,0,6,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,6,0,7,0,5,0,0,0,0,6,0,7,0,0,0,6,0,6,0,6,0,0,0,7,0,7,0,0,0,0,7,0,0,6,0,6,0,6,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,6,0,7,0,0,7,0,7,0,0,0,0,6,6,0,0,0,0,6,0,7,0,0,0,6,0,6,0,7,0,0,0,0,6,0,5,0,6,0,0,0,7,0,6,0,0,0,0,5,5,0,0,0,0,7,0,6,0,0,6,0,7,0,0,0,0,7,5,0,0,0,0,5,0,6,0,0,0,7,0,6,0,7,0,0,6,0,0,0,0,7,0,8,0,0,0,7,0,6,0,7,0,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,4,0,6,0,0,0,6,0,6,0,5,0,0,0,6,0,6,0,0,0,0,7,0,0,3,0,6,0,6,0,0,0,6,0,6,0,0,0,0,7,5,0,0,0,0,7,0,6,0,0,6,0,7,0,0,0,0,7,5,0,0,0,0,6,0,8,0,0,0,6,0,7,0,6,0,0,0,0,6,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,6,0,8,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,5,0,6,0,0,0,7,0,7,0,7,0,0,5,0,0,0,0,7,0,7,0,0,0,7,0,7,0,7,0,0,0,7,0,7,0,0,0,0,6,0,6,0,7,0,0,0,0,7,5,0,0,0,0,5,0,6,0,0,0,7,0,7,0,7,0,0,5,0,0,0,0,6,0,6,0,0,0,7,0,5,0,6,0,0,0,7,0,7,0,0,0,0,7,0,0,7,0,7,0,7,0,0,0,6,0,6,0,0,0,0,6,8,0,0,0,0,6,0,7,0,0,6,0,6,0,0,0,0,5,4,0,0,0,0,6,0,7,0,0,0,6,0,8,0,6,0,0,4,0,0,0,0,7,0,6,0,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,0,0,6,0,8,0,6,0,0,0,6,0,6,0,0,0,0,7,5,0,0,0,0,7,0,7,0,5,0,0,0,0,6,0,6,0,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,0,0,7,0,7,0,7,0,0,0,6,0,6,0,0,0,0,6,7,0,0,0,0,7,0,7,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,6,0,6,0,0,0,6,0,7,0,7,0,0,0,0,5,0,7,0,5,0,0,0,5,0,6,0,0,0,0,7,6,0,0,0,0,6,0,7,0,0,6,0,5,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,7,0,0,0,0,7,0,7,0,0,0,6,0,6,0,5,0,0,0,7,0,7,0,0,0,0,5,5,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,0,6,0,6,0,0,0,0,6,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,6,0,6,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,0,7,0,7,0,6,0,0,0,0,7,0,6,0,7,0,0,0,6,0,5,0,0,0,0,5,7,0,0,0,0,6,0,6,0,0,5,0,6,0,0,0,0,5,6,0,0,0,0,7,0,7,0,0,0,6,0,7,0,6,0,0,7,0,0,0,0,6,0,6,0,0,0,6,0,7,0,6,0,0,0,5,0,5,0,0,0,0,5,0,6,0,6,0,0,0,0,7,6,0,0,0,0,5,0,5,0,0,0,6,0,6,0,6,0,0,7,0,0,0,0,6,0,6,0,0,0,7,0,7,0,6,0,0,0,7,0,7,0,0,0,0,6,0,0,7,0,7,0,7,0,0,0,7,0,6,0,0,0,0,7,7,0,0,0,0,7,0,6,0,0,0,5,0,7,0,5,0,0,0,5,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,6,0,5,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,0,5,0,6,0,6,0,0,6,0,0,0,0,7,0,6,0,0,0,7,0,7,0,7,0,0,0,7,0,7,0,0,0,0,5,0,6,0,6,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,6,0,0,0,0,5,0,5,0,0,0,6,0,7,0,7,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,6,0,6,0,0,0,7,0,7,0,0,0,0,6,7,0,0,0,0,6,0,7,0,4,0,0,0,0,7,0,7,0,0,0,7,0,6,0,7,0,0,0,7,0,6,0,0,0,0,6,0,0,7,0,6,0,7,0,0,0,4,0,4,0,0,0,0,4,7,0,0,0,0,7,0,6,0,0,6,0,7,0,0,0,0,6,7,0,0,0,0,6,0,7,0,0,0,7,0,7,0,7,0,0,6,0,0,0,0,7,0,7,0,0,0,4,0,6,0,5,0,0,0,5,0,6,0,0,0,0,6,0,0,5,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,4,0,5,0,0,0,0,6,6,0,0,0,0,7,0,7,0,0,0,6,0,7,0,7,0,0,0,0,5,0,6,0,6,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,0,7,0,6,0,8,0,0,6,0,0,0,0,7,0,7,0,0,0,7,0,5,0,6,0,0,0,6,0,7,0,0,0,0,6,0,5,0,6,0,0,0,0,7,6,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,6,0,0,0,0,7,0,6,0,0,0,6,0,6,0,6,0,0,0,6,0,7,0,0,0,0,6,0,0,7,0,6,0,7,0,0,0,7,0,5,0,0,0,0,5,6,0,0,0,0,7,0,7,0,0,0,5,0,5,0,6,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,6,0,7,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,0,7,0,5,0,7,0,0,6,0,0,0,0,7,0,7,0,0,0,6,0,6,0,8,0,0,0,5,0,7,0,0,0,0,6,0,6,0,7,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,0,6,0,7,0,7,0,0,6,0,0,0,0,7,0,6,0,0,0,6,0,7,0,7,0,0,0,5,0,6,0,0,0,0,7,0,0,6,0,6,0,7,0,0,0,5,0,6,0,0,0,0,6,7,0,0,0,0,6,0,7,0,5,0,0,0,0,7,0,7,0,0,0,7,0,4,0,6,0,0,0,7,0,6,0,0,0,0,6,0,0,6,0,6,0,8,0,0,0,4,0,6,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,6,0,8,0,0,0,0,7,7,0,0,0,0,6,0,5,0,0,0,6,0,7,0,7,0,0,0,5,0,6,0,0,0,0,6,6,0,0,0,0,7,0,6,0,0,0,7,0,7,0,7,0,0,6,0,0,0,0,6,0,7,0,0,0,5,0,6,0,6,0,0,0,7,0,6,0,0,0,0,5,0,0,6,0,6,0,6,0,0,0,5,0,7,0,0,0,0,6,6,0,0,0,0,7,0,6,0,5,0,0,0,0,7,0,7,0,0,0,6,0,5,0,8,0,0,0,6,0,8,0,0,0,0,7,0,0,6,0,5,0,6,0,0,0,5,0,5,0,0,0,0,6,7,0,0,0,0,6,0,6,0,0,6,0,6,0,0,0,0,6,7,0,0,0,0,5,0,6,0,0,0,6,0,6,0,7,0,0,0,0,5,0,7,0,6,0,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,6,0,7,0,0,6,0,7,0,0,0,0,6,6,0,0,0,0,7,0,7,0,0,0,5,0,7,0,6,0,0,5,0,0,0,0,7,0,6,0,0,0,5,0,7,0,6,0,0,0,6,0,7,0,0,0,0,7,0,6,0,7,0,0,0,0,6,7,0,0,0,0,5,0,6,0,0,0,4,0,5,0,5,0,0,6,0,0,0,0,5,0,6,0,0,0,6,0,6,0,7,0,0,0,6,0,6,0,0,0,0,6,0,0,5,0,5,0,5,0,0,0,6,0,6,0,0,0,0,6,4,0,0,0,0,6,0,7,0,7,0,0,0,0,4,0,6,0,0,0,6,0,6,0,7,0,0,0,5,0,6,0,0,0,0,6,0,0,7,0,7,0,6,0,0,0,6,0,6,0,0,0,0,6,5,0,0,0,0,6,0,8,0,0,6,0,3,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,0,7,0,7,0,7,0,0,0,0,5,0,5,0,6,0,0,0,5,0,2,0,0,0,0,6,6,0,0,0,0,6,0,6,0,0,5,0,5,0,0,0,0,6,5,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,5,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,0,6,0,6,0,0,0,0,5,6,0,0,0,0,5,0,5,0,0,0,6,0,6,0,6,0,0,0,6,0,3,0,0,0,0,6,0,0,6,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,4,0,0,0,0,7,0,6,0,0,5,0,6,0,0,0,0,6,6,0,0,0,0,6,0,8,0,0,0,7,0,7,0,7,0,0,0,0,7,0,7,0,6,0,0,0,5,0,6,0,0,0,0,7,5,0,0,0,0,5,0,7,0,0,6,0,5,0,0,0,0,7,7,0,0,0,0,6,0,7,0,0,0,7,0,6,0,7,0,0,5,0,0,0,0,6,0,7,0,0,0,7,0,6,0,6,0,0,0,7,0,7,0,0,0,0,5,0,6,0,6,0,0,0,0,6,5,0,0,0,0,7,0,5,0,0,0,7,0,5,0,6,0,0,6,0,0,0,0,6,0,7,0,0,0,7,0,6,0,6,0,0,0,7,0,6,0,0,0,0,7,0,0,7,0,6,0,6,0,0,0,6,0,7,0,0,0,0,6,6,0,0,0,0,5,0,6,0,0,0,5,0,4,0,6,0,0,0,4,0,5,0,0,0,0,5,5,0,0,0,0,7,0,6,0,0,5,0,3,0,0,0,0,5,4,0,0,0,0,6,0,7,0,0,0,7,0,6,0,6,0,0,6,0,0,0,0,6,0,7,0,0,0,6,0,7,0,7,0,0,0,5,0,5,0,0,0,0,6,0,6,0,6,0,0,0,0,6,6,0,0,0,0,5,0,7,0,0,0,7,0,6,0,7,0,0,5,0,0,0,0,7,0,6,0,0,0,6,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,0,0,7,0,6,0,7,0,0,0,7,0,6,0,0,0,0,7,7,0,0,0,0,5,0,6,0,5,0,0,0,0,6,0,7,0,0,0,6,0,7,0,6,0,0,0,6,0,6,0,0,0,0,6,0,0,7,0,6,0,6,0,0,0,6,0,7,0,0,0,0,4,6,0,0,0,0,4,0,5,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,5,0,6,0,0,0,7,0,6,0,6,0,0,6,0,0,0,0,7,0,7,0,0,0,6,0,6,0,5,0,0,0,5,0,4,0,0,0,0,6,0,0,5,0,6,0,4,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,6,0,5,0,0,0,0,6,6,0,0,0,0,7,0,7,0,0,0,7,0,7,0,6,0,0,0,0,6,0,5,0,5,0,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,7,0,7,0,0,6,0,7,0,0,0,0,7,5,0,0,0,0,6,0,6,0,0,0,8,0,6,0,6,0,0,6,0,0,0,0,7,0,7,0,0,0,7,0,5,0,7,0,0,0,7,0,5,0,0,0,0,6,0,6,0,5,0,0,0,0,6,6,0,0,0,0,7,0,6,0,0,0,6,0,6,0,6,0,0,6,0,0,0,0,6,0,7,0,0,0,6,0,6,0,5,0,0,0,7,0,5,0,0,0,0,6,0,0,7,0,7,0,7,0,0,0,6,0,7,0,0,0,0,5,6,0,0,0,0,6,0,7,0,0,0,6,0,6,0,5,0,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0,0,0,6,0,5,0,7,0,0,7,0,0,0,0,7,0,7,0,0,0,8,0,6,0,7,0,0,0,7,0,6,0,0,0,0,6,0,7,0,6,0,0,0,0,7,6,0,0,0,0,6,0,7,0,0,0,7,0,6,0,6,0,0,6,0,0,0,0,7,0,7,0,0,0,7,0,7,0,6,0,0,0,6,0,5,0,0,0,0,6,0,0,7,0,7,0,6,0,0,0,6,0,5,0,0,0,0,7,7,0,0,0,0,7,0,6,0,5,0,0,0,0,7,0,7,0,0,0,6,0,5,0,6,0,0,0,6,0,6,0,0,0,0,6,0,0,8,0,5,0,6,0,0,0,5,0,5,0,0,0,0,6,7,0,0,0,0,6,0,5,0,0,8,0,6,0,0,0,0,7,7,0,0,0,0,6,0,6,0,0,0,7,0,6,0,6,0,0,0,6,0,5,0,0,0,0,7,6,0,0,0,0,6,0,7,0,0,0,7,0,6,0,7,0,0,6,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,0,5,0,7,0,0,0,0,5,0,0,7,0,7,0,7,0,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,7,0,7,0,5,0,0,0,0,7,0,7,0,0,0,8,0,6,0,6,0,0,0,8,0,6,0,0,0,0,7,0,0,6,0,4,0,7,0,0,0,6,0,4,0,0,0,0,7,7,0,0,0,0,5,0,6,0,0,6,0,7,0,0,0,0,6,7,0,0,0,0,6,0,6,0,0,0,7,0,7,0,6,0,0,0,0,6,0,7,0,5,0,0,0,7,0,6,0,0,0,0,6,5,0,0,0,0,6,0,7,0,0,6,0,6,0,0,0,0,6,6,0,0,0,0,7,0,7,0,0,0,6,0,7,0,5,0,0,6,0,0,0,0,7,0,6,0,0,0,6,0,7,0,5,0,0,0,7,0,6,0,0,0,0,7,0,0,6,0,4,0,6,0,0,0,4,0,5,0,0,0,0,7,6,0,0,0,0,5,0,6,0,0,5,0,4,0,0,0,0,7,3,0,0,0,0,7,0,7,0,0,0,5,0,6,0,6,0,0,6,0,0,0,0,6,0,5,0,0,0,6,0,6,0,5,0,0,0,7,0,7,0,0,0,0,6,0,5,0,5,0,0,0,0,8,7,0,0,0,0,6,0,7,0,0,0,7,0,6,0,7,0,0,6,0,0,0,0,6,0,7,0,0,0,7,0,5,0,7,0,0,0,6,0,6,0,0,0,0,7,0,0,7,0,7,0,7,0,0,0,6,0,5,0,0,0,0,6,7,0,0,0,0,6,0,7,0,5,0,0,0,0,6,0,6,0,0,0,6,0,7,0,6,0,0,0,6,0,6,0,0,0,0,6,0,0,6,0,6,0,6,0,0,0,6,0,7,0,0,0,0,6,7,0,0,0,0,6,0,5,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,5,0,4,0,0,0,6,0,4,0,6,0,0,0,5,0,5,0,0,0,0,8,6,0,0,0,0,7,0,6,0,0,0,7,0,7,0,7,0,0,7,0,0,0,0,7,0,6,0,0,0,7,0,5,0,7,0,0,0,5,0,6,0,0,0,0,6,0,0,7,0,6,0,7,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,6,0,4,0,0,0,0,7,0,7,0,0,0,7,0,4,0,6,0,0,0,7,0,7,0,0,0,0,7,0,0,6,0,4,0,7,0,0,0,6,0,6,0,0,0,0,7,7,0,0,0,0,7,0,6,0,0,7,0,7,0,0,0,0,7,7,0,0,0,0,6,0,7,0,0,0,6,0,4,0,6,0,0,0,0,6,0,6,0,5,0,0,0,6,0,6,0,0,0,0,6,5,0,0,0,0,5,0,5,0,0,6,0,7,0,0,0,0,7,7,0,0,0,0,7,0,7,0,0,0,6,0,7,0,7,0,0,6,0,0,0,0,6,0,6,0,0,0,7,0,7,0,6,0,0,0,6,0,6,0,0,0,0,7,5,0,0,0,0,6,0,6,0,0,0,6,0,6,0,6,0,0,0,6,0,7,0,0,0,0,7,0,0,6,0,7,0,6,0,0,0,7,0,6,0,0,0,0,6,6,0,0,0,0,4,0,5,0,0,6,0,6,0,0,0,0,6,7,0,0,0,0,5,0,6,0,0,0,6,0,4,0,6,0,0,0,0,5,0,6,0,6,0,0,0,7,0,6,0,0,0,0,7,6,0,0,0,0,6,0,6,0,0,6,0,6,0,0,0,0,6,7,0,0,0,0,7,0,7,0,0,0,6,0,7,0,7,0,0,5,0,0,0,0,5,0,5,0,0,0,7,0,7,0,6,0,0,0,6,0,6,0,0,0,0,7,0,6,0,6,0,0,0,0,6,6,0,0,0,0,6,0,6,0,0,0,6,0,5,0,6,0,0,6,0,0,0,0,6,0,6,0,0,0,5,0,3,0,5,0,0,0,6,0,6,0,0,0,0,7,0,0,6,0,5,0,6,0,0,0,6,0,6,0,0,0,0,7,6,0,0,0,0,7,0,7,0};
const char cube_algorithm::table3[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,5,0,6,5,0,0,0,0,0,0,0,0,5,0,0,0,6,0,5,6,0,0,0,0,5,0,6,5,0,0,5,6,0,5,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,6,5,0,0,0,0,6,0,6,5,0,0,5,4,0,6,0,0,0,0,0,0,6,0,5,6,0,0,6,5,0,6,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,5,6,0,0,0,0,6,0,5,6,0,0,6,5,0,6,0,0,0,0,0,0,6,0,4,5,0,0,5,6,0,6,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,5,0,6,5,0,0,5,6,0,5,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,6,6,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,5,5,0,6,0,0,0,5,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,6,0,0,0,5,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,6,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,6,6,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,5,5,0,6,0,0,0,5,0,0,0,0,0,0,0,0,5,5,0,6,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,6,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,6,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,6,6,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,6,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,5,6,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,6,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,5,6,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,4,0,0,4,5,0,4,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,0,4,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,3,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,0,0,5,5,0,5,0,0,0,0,5,4,0,4,0,0,0,4,0,0,0,0,0,0,0,0,4,5,0,4,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,5,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,0,6,6,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,5,0,6,0,0,0,0,6,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,6,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,5,6,0,0,6,6,0,6,0,0,0,0,5,6,0,5,0,0,0,5,0,0,0,0,0,0,0,0,5,6,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,5,0,0,5,5,0,5,0,0,0,0,4,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,0,4,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,4,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,4,0,0,4,5,0,4,0,0,0,0,4,3,0,4,0,0,0,3,0,0,0,0,0,0,0,0,3,4,0,3,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,6,0,0,6,6,0,6,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,4,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const char cube_algorithm::table4[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,5,0,4,5,0,0,0,0,0,0,0,0,5,0,0,0,4,0,5,4,0,0,0,0,5,0,4,5,0,0,5,4,0,5,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,4,5,0,0,0,0,4,0,4,3,0,0,3,2,0,4,0,0,0,0,0,0,5,0,3,4,0,0,4,3,0,5,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,4,0,5,4,0,0,0,0,5,0,3,4,0,0,4,3,0,5,0,0,0,0,0,0,4,0,2,3,0,0,3,4,0,4,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,0,0,0,5,0,4,5,0,0,5,4,0,5,0,0,0,0,4,5,0,4,0,0,0,5,0,0,0,0,0,0,0,0,5,4,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const char cube_algorithm::table5[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,10,11,10,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,9,8,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,7,8,8,7,0,0,0,0,0,0,6,10,10,6,12,10,9,6,6,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,7,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,9,8,7,7,8,0,0,0,0,0,0,9,6,6,9,9,11,6,10,10,6,12,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,2,10,12,12,9,0,0,0,0,0,0,9,11,5,10,10,6,11,9,10,6,5,10,0,0,0,0,0,0,0,0,0,0,0,0,11,9,10,5,6,10,9,11,6,10,10,5,0,0,0,0,0,0,6,5,9,10,10,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,10,12,6,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,6,9,9,11,0,0,0,0,0,0,10,8,9,7,7,8,9,7,10,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,5,10,10,6,0,0,0,0,0,0,7,4,8,11,11,9,8,10,7,11,11,4,0,0,0,0,0,0,0,0,0,0,0,0,8,10,7,11,11,4,8,3,8,12,12,10,0,0,0,0,0,0,9,11,6,10,10,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,9,10,6,5,10,0,0,0,0,0,0,8,10,7,11,11,4,7,4,8,11,11,9,0,0,0,0,0,0,0,0,0,0,0,0,8,3,8,12,12,10,8,10,7,11,11,4,0,0,0,0,0,0,11,9,10,6,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,8,9,7,7,8,9,7,10,8,8,7,0,0,0,0,0,0,6,10,10,6,12,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,6,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,6,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,10,12,6,10,0,0,0,0,0,0,9,7,10,8,8,7,10,8,9,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,9,10,5,6,10,0,0,0,0,0,0,8,10,7,11,11,4,8,3,8,12,12,10,0,0,0,0,0,0,0,0,0,0,0,0,7,4,8,11,11,9,8,10,7,11,11,4,0,0,0,0,0,0,11,9,10,5,6,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,11,6,10,10,5,0,0,0,0,0,0,8,3,8,12,12,10,8,10,7,11,11,4,0,0,0,0,0,0,0,0,0,0,0,0,8,10,7,11,11,4,7,4,8,11,11,9,0,0,0,0,0,0,9,11,5,10,10,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,7,10,8,8,7,10,8,9,7,7,8,0,0,0,0,0,0,9,6,6,9,9,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,10,6,12,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,9,10,10,9,0,0,0,0,0,0,9,11,6,10,10,5,11,9,10,6,5,10,0,0,0,0,0,0,0,0,0,0,0,0,11,9,10,5,6,10,9,11,5,10,10,6,0,0,0,0,0,0,9,2,10,12,12,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,10,10,12,6,10,9,6,6,9,9,11,0,0,0,0,0,0,10,9,8,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,7,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,6,6,9,9,11,6,10,10,12,6,10,0,0,0,0,0,0,9,10,7,8,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,9,8,7,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,11,10,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const char cube_algorithm::table6[] = {1,10,10,5,5,10,10,7,5,10,10,5,5,10,10,5,7,10,10,5,5,10,10,7,9,4,2,9,9,6,4,11,9,6,6,9,9,6,6,9,11,6,6,9,9,6,6,11,9,6,8,9,9,4,6,11,9,8,8,9,9,8,8,9,11,8,8,9,9,8,8,11,9,8,8,5,7,8,8,9,7,10,10,9,9,10,10,9,9,10,10,7,9,10,10,9,9,8,8,7,5,8,8,9,9,10,10,7,7,10,10,9,9,10,10,9,9,10,10,9,7,6,8,9,9,8,10,11,9,8,10,9,9,10,8,9,11,10,8,9,9,8,10,11,9,4,6,9,9,6,4,11,9,6,6,9,9,6,6,9,11,6,6,9,9,2,6,11,7,10,10,5,5,10,10,5,5,10,10,5,5,10,10,5,7,10,10,5,5,10,10,3,9,8,10,7,9,8,8,9,9,10,10,7,9,10,10,9,9,10,10,5,7,8,10,9,11,10,10,9,9,8,10,9,9,8,8,9,9,8,8,9,9,10,8,9,9,10,6,9,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,6,9,9,8,8,9,9,8,10,9,9,10,8,9,7,10,10,9,9,10,8,7,9,10,10,7,5,8,10,9,9,8,10,9,7,8,8,9,9,10,10,5,9,10,10,7,9,10,10,7,9,8,10,9,11,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,8,8,9,9,8,8,9,7,10,8,9,9,8,6,11,9,8,10,9,9,10,8,9,11,10,8,9,9,8,10,11,9,8,8,7,9,10,8,9,5,10,10,9,7,10,8,9,9,10,10,9,7,10,10,9,7,10,10,9,9,10,10,7,9,10,10,9,9,10,10,9,9,10,10,9,9,10,10,9,11,8,8,9,9,8,8,11,9,8,6,9,9,8,8,9,9,8,8,9,9,8,8,11,11,10,10,9,9,8,10,9,9,8,8,9,9,8,8,9,9,6,8,9,9,10,10,9,9,8,10,9,9,10,8,9,9,10,10,7,7,10,8,5,9,10,10,9,7,8,10,9,9,8,8,9,7,10,8,9,7,10,10,9,5,10,8,7,9,10,10,9,9,10,10,9,9,6,8,9,9,8,6,11,9,8,8,9,9,8,4,9,11,8,8,9,9,8,8,11,11,8,8,9,9,8,8,11,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,11,9,10,10,7,7,10,10,7,7,10,10,7,7,10,10,7,5,10,10,7,7,10,10,9,9,4,6,9,9,2,4,11,9,6,6,9,9,6,6,9,11,6,6,9,9,6,6,11,7,8,8,3,3,8,10,7,5,10,10,5,5,10,10,7,7,8,10,5,7,10,8,7,5,8,8,7,7,10,8,9,9,10,10,7,9,10,12,9,9,10,10,7,9,8,10,9,7,6,6,9,7,8,8,9,9,8,8,9,11,8,10,9,9,8,10,9,11,8,8,9,7,6,6,7,9,8,8,9,11,10,8,9,9,8,10,11,9,8,8,9,9,8,8,9,7,10,8,7,7,6,10,7,9,10,8,9,9,8,10,9,9,10,10,9,9,10,10,9,7,10,10,5,5,8,8,7,7,10,10,3,7,10,10,5,7,8,10,3,5,8,8,7,11,6,6,9,9,6,6,11,9,4,6,9,9,6,8,9,11,4,4,9,9,6,4,9,7,8,8,9,9,8,6,9,11,10,8,7,9,8,10,11,9,8,8,9,9,6,8,9,9,10,8,9,9,10,10,9,7,8,8,9,9,10,8,9,7,10,8,9,7,8,10,7,7,10,8,7,7,10,10,7,9,10,8,7,7,8,10,9,7,8,10,7,7,8,8,7,9,8,8,9,9,8,8,9,9,8,6,9,9,8,8,9,7,8,8,7,9,8,6,9,7,8,8,9,9,8,6,9,9,8,8,9,11,8,10,9,9,8,10,7,11,6,8,9,7,10,8,7,7,10,10,7,7,10,8,7,9,8,10,7,7,8,10,7,9,8,8,7,7,10,10,9,9,6,10,7,9,10,8,7,9,8,10,9,9,10,10,7,9,8,10,9,9,8,8,7,9,8,8,9,9,8,6,9,9,8,8,9,7,8,8,9,9,8,6,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,11,9,8,10,7,9,10,8,9,7,10,10,9,9,8,8,9,9,10,10,7,7,10,8,9,9,10,8,9,9,10,10,9,9,8,10,9,7,8,8,7,7,10,8,9,9,8,10,7,9,8,8,9,9,8,8,9,9,8,8,7,9,6,8,9,7,6,8,9,9,8,8,9,9,8,8,9,7,8,8,9,9,8,8,9,9,6,8,9,7,6,8,9,9,8,8,9,9,8,10,7,7,10,8,9,7,10,8,7,7,8,10,7,5,10,10,7,7,10,10,9,9,8,10,9,7,10,8,9,9,10,8,7,7,10,8,7,9,8,10,9,9,10,10,9,11,8,8,9,9,10,8,9,9,8,8,9,9,8,6,9,11,8,8,9,9,8,8,11,9,6,4,9,9,8,6,11,9,8,8,9,9,8,8,9,11,8,8,9,9,8,8,11,5,8,10,7,7,8,8,9,7,10,10,9,7,10,8,9,9,10,10,9,9,12,10,9,9,6,6,5,5,6,8,9,7,8,8,7,7,8,8,9,9,6,8,7,9,8,6,9,5,6,8,7,5,6,8,7,7,8,10,9,7,8,8,7,7,8,8,7,9,10,8,7,5,6,8,5,7,6,8,7,7,8,8,7,7,10,8,9,7,8,8,9,7,10,8,7,9,8,4,7,7,6,8,9,9,6,8,9,9,8,8,9,9,8,6,9,9,8,8,9,9,8,10,7,7,10,8,9,7,8,10,7,7,10,10,7,9,10,8,7,7,10,10,5,11,8,10,9,9,8,8,9,9,8,8,9,9,8,8,9,11,8,8,9,9,6,8,11,7,8,8,5,9,8,8,7,9,8,8,7,7,10,8,7,7,8,6,7,7,10,6,5,9,8,8,9,9,6,8,9,9,8,6,9,9,6,6,9,9,8,6,7,7,6,8,9,9,6,8,7,9,8,6,9,7,6,8,9,9,8,8,9,9,8,8,7,7,6,6,9,7,8,8,9,7,8,8,7,5,8,10,7,9,8,8,7,7,8,6,7,7,10,6,5,7,8,8,9,5,8,8,7,7,6,10,7,9,8,8,7,7,6,8,7,7,10,8,5,9,6,8,9,7,8,6,9,9,8,8,7,7,8,8,7,9,6,6,9,9,6,8,9,9,8,4,9,9,8,8,9,7,6,8,9,7,8,6,9,9,8,6,9,9,8,8,9,5,8,8,7,7,8,6,7,7,8,8,7,5,10,6,9,7,8,8,9,7,10,8,7,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,8,9,9,8,8,9,7,10,10,7,7,8,10,7,7,8,10,7,7,10,8,9,7,8,8,9,7,10,8,7,9,8,8,9,9,6,8,9,9,6,6,7,9,6,6,7,9,8,8,9,9,6,8,9,7,8,8,7,9,8,8,7,9,6,8,7,5,10,8,7,7,6,8,7,7,10,8,5,5,8,8,7,7,8,6,7,5,8,10,9,7,8,6,7,7,8,8,7,9,10,8,7,9,8,6,7,7,8,6,9,5,8,8,9,5,8,6,7,9,6,8,9,7,8,6,9,7,10,10,7,7,8,10,7,7,8,10,9,7,10,8,7,7,8,8,7,9,10,8,7,11,8,8,9,9,8,8,11,9,8,6,9,9,6,8,9,9,6,8,9,9,8,6,11,9,8,8,7,5,8,8,9,9,10,10,7,7,10,10,9,9,10,10,9,9,10,10,9,7,6,8,7,9,6,8,9,9,8,8,9,9,10,8,11,9,8,8,11,9,10,8,9,5,6,6,5,7,8,8,7,9,10,8,7,7,8,10,9,7,8,8,7,7,8,8,7,7,8,4,7,7,4,8,9,9,6,6,9,9,6,8,9,7,8,6,9,9,8,8,7,7,4,6,7,9,6,8,7,9,8,6,9,9,8,8,11,9,8,6,9,7,8,8,9,5,8,8,7,3,8,10,5,7,10,8,7,7,8,10,7,7,10,8,7,7,8,10,7,9,8,8,9,9,8,8,9,9,8,8,7,9,8,8,9,9,6,6,9,9,8,8,7,9,10,10,7,9,10,10,9,7,8,10,7,9,10,10,7,9,8,10,7,7,8,8,9,9,6,8,7,9,6,6,9,9,8,8,9,9,6,8,11,7,6,6,9,7,6,6,7,7,10,8,7,7,8,10,7,5,10,8,7,7,8,10,7,5,10,8,5,7,8,8,5,7,6,8,7,7,8,8,5,9,10,6,7,7,8,10,9,7,8,8,7,5,8,8,7,9,8,6,9,7,6,8,7,9,8,4,9,9,8,6,9,7,8,4,9,7,6,8,7,7,8,6,9,9,8,8,7,9,6,8,9,7,8,8,7,9,8,6,9,9,6,8,7,7,8,6,7,7,10,8,7,9,8,8,5,7,8,8,9,7,6,10,7,7,8,8,5,7,10,8,7,5,10,10,7,7,8,8,7,7,8,8,7,7,8,10,7,7,8,10,7,9,6,6,9,9,6,6,9,9,8,6,7,7,8,8,9,7,6,6,11,9,8,6,7,9,8,10,9,5,10,8,9,9,10,8,7,7,10,10,9,9,10,8,9,7,10,10,9,9,6,8,9,9,8,8,7,9,8,8,9,9,10,8,11,9,8,6,11,7,10,8,9,7,10,8,7,9,10,8,7,7,8,8,7,7,8,8,5,7,10,10,7,7,8,10,7,7,8,8,9,9,6,8,7,9,8,8,7,7,6,8,9,9,4,6,11,9,6,8,9,7,8,8,9,9,6,8,7,9,8,6,7,9,6,6,7,7,8,8,9,9,8,8,9,7,8,8,7,7,10,8,7,9,8,6,7,5,8,8,9,5,6,10,7,7,8,8,7,9,8,8,9,9,6,8,9,9,8,8,9,7,8,8,9,7,6,8,9,9,8,8,9,9,10,10,7,9,10,10,9,7,10,10,9,7,8,8,7,9,8,10,7,7,10,8,9,9,8,8,5,7,8,8,9,7,10,10,9,9,10,10,9,9,10,10,7,9,10,10,9,7,6,8,9,7,6,8,9,9,8,10,11,9,8,8,9,9,8,8,9,11,10,8,9,5,6,6,7,5,8,8,7,7,8,8,7,9,8,10,7,7,8,10,7,9,8,8,7,7,4,6,9,7,6,8,7,9,6,8,9,9,6,8,7,9,8,8,9,11,8,8,9,7,8,4,7,7,4,8,9,9,6,6,9,9,6,8,9,7,8,6,9,9,8,8,7,5,8,8,3,7,8,10,5,7,8,8,7,7,8,10,7,7,10,10,7,7,8,10,7,9,8,8,9,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,7,9,8,6,7,9,10,10,9,7,10,10,9,9,10,10,7,7,10,10,7,9,8,8,7,7,8,8,9,7,8,6,9,9,8,8,7,7,6,8,9,9,8,8,9,9,8,6,9,7,6,8,7,7,10,8,9,7,10,8,7,7,10,8,7,7,8,8,7,7,10,8,7,5,8,10,7,7,8,6,7,7,10,8,7,7,10,8,7,9,8,8,7,7,8,8,5,9,8,6,5,7,8,8,9,9,6,8,7,7,6,6,11,9,8,8,9,9,8,8,7,9,6,4,9,9,6,8,9,7,6,6,9,9,6,6,9,9,8,8,7,7,6,8,9,11,6,6,7,7,6,8,7,7,8,8,5,7,8,8,7,9,6,10,5,7,8,10,7,9,8,8,7,7,10,8,5,7,10,10,7,7,10,8,7,7,8,8,7,7,10,8,7,7,8,8,7,7,8,8,9,9,6,8,7,9,8,6,9,9,6,6,9,7,8,8,7,7,8,8,9,9,8,10,5,9,10,8,9,7,8,10,9,9,8,10,7,9,10,10,7,9,10,10,9,9,8,8,9,9,6,8,9,7,8,8,9,9,8,8,9,7,8,8,9,9,8,6,9,7,10,8,7,7,8,10,7,7,8,8,5,5,8,10,7,5,8,10,7,7,8,10,5,9,8,6,7,9,6,8,7,9,4,8,9,9,4,6,7,7,8,8,9,9,6,8,7,9,6,6,9,9,6,6,9,7,6,8,11,9,6,8,9,7,6,8,7,9,8,6,7,7,8,8,7,7,10,8,7,5,10,8,7,9,6,8,7,5,8,8,7,9,8,6,7,9,6,8,9,9,8,8,7,9,6,10,11,9,8,8,7,9,8,8,9,11,10,8,9,9,10,10,9,7,10,10,9,7,10,8,7,7,10,8,7,9,8,10,9,7,10,8,9,7,6,8,9,9,8,10,11,9,10,8,9,9,8,8,9,11,10,10,9,9,8,10,11,7,10,6,7,7,8,10,7,9,8,10,9,9,10,10,9,9,10,8,9,9,10,10,9,9,8,6,7,7,4,8,9,9,8,6,9,9,6,8,9,9,8,8,9,9,8,8,9,5,8,8,3,7,8,10,5,7,8,10,7,7,8,8,7,7,10,8,7,7,10,10,7,5,8,8,7,3,8,10,5,7,8,8,7,7,10,8,7,7,10,8,7,7,10,10,7,9,2,6,9,9,6,8,9,9,6,6,9,9,6,6,9,11,8,6,9,9,6,8,11,7,10,10,9,9,10,10,7,9,8,10,9,9,10,8,7,9,10,8,9,7,6,10,9,11,10,8,9,9,10,8,11,9,8,8,9,9,8,10,9,11,8,8,9,9,8,8,7,7,10,8,7,7,8,10,7,7,8,8,7,7,10,8,7,7,10,8,5,7,10,8,7,9,8,6,9,9,6,6,9,9,6,6,9,9,6,6,9,9,8,6,9,9,6,4,9,9,8,6,9,7,8,8,9,9,8,6,9,9,8,8,9,9,8,4,9,7,6,8,9,5,8,10,7,7,8,10,5,7,8,8,7,7,10,8,7,7,10,8,7,3,8,10,7,7,10,8,7,7,8,10,7,7,8,10,5,7,8,8,7,7,8,8,7,7,10,10,7,9,8,6,7,9,8,8,9,9,4,8,9,9,6,8,7,9,8,8,9,9,6,8,9,11,6,8,9,9,8,6,11,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,7,10,10,7,7,8,10,7,5,8,10,7,7,8,8,7,7,10,8,7,7,8,8,7,11,6,8,9,9,10,10,7,9,8,8,9,9,8,10,9,11,10,8,9,9,8,10,11,7,10,10,9,7,8,10,7,9,10,6,9,9,10,8,9,9,10,8,9,7,10,10,9,9,8,6,9,9,6,6,9,9,6,6,9,9,6,6,9,9,4,6,9,9,6,8,9,5,8,10,7,7,8,10,5,7,8,10,7,7,8,8,3,7,10,8,7,7,8,10,7,7,10,10,7,7,8,10,7,7,8,8,7,5,10,8,7,7,8,8,7,7,8,10,7,9,8,8,9,9,8,8,9,9,8,6,9,9,6,4,7,9,8,8,9,7,6,8,9,7,10,10,7,9,8,10,7,9,8,10,9,9,6,8,7,9,10,10,9,9,10,10,9,11,10,8,9,9,8,8,11,9,10,8,9,9,8,8,9,7,8,10,9,9,8,8,11,9,4,6,9,9,6,4,11,9,6,6,9,9,6,2,9,11,6,6,9,9,6,6,11,7,10,8,5,5,10,8,7,3,10,10,7,3,10,8,5,7,8,10,7,5,10,8,7,9,8,10,7,7,10,8,9,7,10,8,7,7,8,10,7,5,10,10,7,7,10,10,9,9,8,8,9,9,8,8,9,7,8,8,9,9,6,8,9,7,8,8,9,9,8,6,9,9,8,8,9,9,8,8,9,9,8,6,9,7,8,8,9,7,6,8,9,9,8,8,9,7,10,10,9,9,10,10,7,9,10,8,9,9,8,6,7,9,10,10,9,7,8,10,9,7,8,10,7,7,10,10,7,5,10,10,5,5,10,8,3,7,8,10,5,3,8,8,7,11,6,6,9,9,8,6,11,9,4,6,9,9,6,6,9,11,4,4,9,9,6,4,9,9,8,8,9,9,8,8,9,9,8,8,9,9,6,8,9,7,8,8,9,7,8,6,9,9,10,8,7,9,8,10,9,9,8,10,9,9,8,10,9,7,10,8,7,9,8,10,7,7,10,8,9,7,10,10,7,7,10,8,9,7,8,10,7,7,8,10,7,7,8,8,7,7,6,8,11,9,10,8,9,9,10,8,11,9,8,8,7,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,9,9,8,6,9,9,8,8,7,7,6,8,9,9,8,8,9,7,10,8,7,9,10,10,7,7,10,8,7,7,8,10,7,7,8,10,9,7,8,8,7,7,10,8,9,9,10,10,7,7,10,8,9,7,8,6,9,9,10,10,9,9,10,10,9,7,8,6,9,11,10,6,9,9,8,8,9,7,8,8,9,9,8,10,11,9,8,8,9,11,8,8,9,9,8,8,11,9,8,8,9,9,8,6,9,9,8,8,9,9,8,8,11,9,8,10,9,7,8,8,9,9,10,10,7,7,8,10,7,9,8,10,9,9,10,10,9,9,10,8,9,7,8,10,9,9,8,8,7,9,10,10,9,7,10,8,9,9,8,10,7,7,6,8,9,11,10,8,9,9,8,8,9,9,8,8,9,9,8,10,11,7,6,8,9,7,8,6,11,9,10,6,9,7,10,8,11,9,8,8,9,9,8,8,9,9,8,8,9,5,8,8,9,9,12,8,9,7,10,10,9,7,10,10,7,9,10,10,9,7,8,10,9,9,8,10,7,9,8,8,9,7,10,8,9,9,10,10,9,9,10,10,7,7,10,8,9,11,8,8,9,9,6,8,9,9,8,8,9,9,8,10,9,11,8,8,9,9,8,8,11,7,10,10,5,5,10,10,5,5,10,10,5,5,10,10,5,3,10,10,5,5,10,10,7,11,6,6,9,9,6,6,11,9,6,4,9,9,4,6,9,9,4,6,9,9,8,4,11,11,8,8,9,9,10,8,9,9,8,8,9,9,8,6,9,11,8,8,9,9,8,8,11,9,10,10,9,7,10,10,9,7,10,8,7,7,10,8,7,9,8,10,9,7,10,8,9,9,10,10,7,9,10,10,9,7,10,10,9,7,8,8,7,9,8,10,7,7,10,8,9,11,10,10,9,9,8,8,11,9,8,8,9,9,8,8,9,7,8,8,9,9,10,8,11,11,6,8,9,9,6,6,11,9,6,4,9,9,4,6,9,9,4,6,9,9,6,4,11,7,10,10,5,5,10,10,5,5,10,10,5,5,10,10,5,5,10,10,5,5,10,10,5,9,10,10,9,7,10,10,9,7,10,8,7,7,10,8,7,9,8,10,9,7,10,8,9,9,8,8,9,9,8,8,9,9,8,10,9,9,10,8,9,11,8,8,9,9,8,10,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,6,9,9,6,8,9,9,8,6,11,9,10,10,7,7,8,10,9,9,10,10,7,7,8,10,7,9,8,10,7,9,10,8,9,9,10,10,7,9,10,10,9,7,10,10,9,7,8,8,7,9,8,10,7,7,10,8,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,6,9,9,6,8,9,9,8,6,11,11,8,10,9,9,8,10,11,9,8,8,9,9,8,8,9,7,8,8,9,9,10,8,11,9,10,10,7,7,8,10,9,9,10,10,7,7,8,10,7,9,8,10,7,9,10,8,9,7,10,10,7,7,10,10,9,7,10,10,7,7,10,10,7,5,10,10,7,7,10,10,9,9,8,8,9,9,8,8,11,9,8,10,9,9,6,8,9,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,9,9,8,10,9,9,10,8,9,11,10,8,9,9,8,8,9,9,10,10,7,7,8,10,9,7,10,8,7,9,10,10,9,9,8,10,7,7,10,8,9,9,10,10,7,7,8,10,9,7,10,8,7,9,10,10,9,9,8,10,7,7,10,8,9,11,8,8,9,9,6,8,9,9,8,8,9,9,8,10,9,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,11,9,8,6,9,9,10,8,9,11,8,8,9,9,8,8,11,7,10,10,9,9,10,10,7,9,10,10,9,9,10,10,9,11,10,10,9,9,10,10,9,9,8,8,9,7,10,8,9,7,10,10,9,5,10,8,7,9,10,10,9,9,10,10,9,7,8,8,9,9,8,6,9,7,8,10,11,9,8,6,9,9,8,8,9,11,10,8,9,7,8,8,9,5,8,8,7,7,8,8,9,7,6,10,7,5,6,10,7,7,8,8,7,9,6,6,9,7,8,6,9,9,8,8,9,9,6,6,7,7,6,6,9,11,8,6,7,7,8,8,9,9,6,8,7,9,8,6,7,9,6,6,7,7,8,8,9,9,8,8,9,7,10,8,7,7,8,10,7,7,8,8,7,5,8,10,7,7,8,10,7,7,8,10,7,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,7,9,6,6,9,9,8,8,7,9,10,10,7,9,10,10,9,7,8,10,7,9,10,10,7,9,8,10,7,7,8,8,9,9,8,6,9,9,6,8,7,9,8,8,9,7,4,6,9,7,8,4,7,9,6,8,7,7,10,8,5,7,10,10,7,7,10,8,7,7,8,8,7,5,10,8,7,5,8,8,5,7,8,8,9,7,10,6,5,7,10,8,9,7,6,8,7,7,8,8,5,7,8,8,7,9,6,8,9,9,8,6,9,7,8,6,11,9,8,6,9,7,6,6,7,9,6,6,7,7,8,8,9,7,8,8,7,9,8,6,9,9,8,6,7,9,4,6,9,11,6,8,9,7,8,6,9,7,8,8,7,7,8,8,9,7,8,10,5,7,6,10,7,7,8,8,5,5,10,8,7,7,10,8,5,7,10,8,7,3,8,8,7,7,10,8,7,7,8,10,7,7,8,4,9,9,8,8,9,7,6,6,9,7,6,4,9,7,8,6,9,9,8,8,7,9,8,10,9,7,10,8,9,9,10,10,9,5,8,10,7,9,10,8,7,9,10,10,9,9,8,8,9,7,8,8,9,9,8,8,9,9,8,6,9,7,6,8,9,9,8,8,9,7,8,8,7,7,8,10,7,7,8,8,5,9,8,10,7,7,10,10,7,7,8,10,7,7,8,6,9,7,8,8,7,9,6,8,7,9,8,8,9,9,8,6,9,9,6,8,7,7,8,6,9,9,8,4,7,7,8,8,11,9,6,6,9,9,8,6,7,9,8,8,9,5,8,6,9,7,10,6,7,5,10,8,9,7,8,8,7,7,8,8,7,7,8,8,7,9,8,8,9,9,8,6,7,9,8,10,11,9,8,8,9,9,8,6,7,11,10,8,9,9,10,10,7,7,8,10,9,7,10,8,7,9,10,10,9,9,8,10,7,7,10,8,9,11,10,8,9,9,10,10,9,9,8,8,9,9,8,10,9,9,6,8,9,9,8,10,9,9,10,10,9,9,8,10,9,9,8,8,7,9,8,8,7,7,10,10,9,9,8,10,7,9,8,6,9,9,8,8,9,9,6,8,9,7,6,6,7,9,8,6,9,9,6,8,9,7,10,8,7,7,8,10,7,7,8,10,5,5,8,8,7,5,8,8,7,7,10,10,5,7,10,10,7,9,8,8,7,7,8,10,7,7,8,8,5,7,10,8,7,7,8,10,7,9,8,6,9,9,6,6,9,9,6,6,9,9,6,6,9,9,4,6,9,9,6,8,9,9,10,8,9,7,8,10,9,9,10,8,9,7,8,8,9,7,10,8,9,9,10,10,7,9,8,8,9,9,8,8,9,9,10,8,9,9,8,8,9,9,10,10,9,9,8,8,11,7,10,10,7,5,8,10,7,7,8,10,7,7,8,8,5,5,8,8,7,7,8,10,5,11,6,6,9,9,6,6,11,9,6,6,9,9,6,6,9,9,6,6,9,9,6,6,9,9,8,8,9,9,6,8,9,9,6,6,7,9,6,6,7,9,8,8,9,9,6,8,9,7,10,10,7,7,8,10,7,7,8,8,5,5,10,8,7,5,8,8,7,7,8,10,5,7,8,8,7,7,8,10,7,7,8,10,9,5,8,8,7,7,10,8,7,7,10,10,7,9,8,6,9,7,6,8,9,9,8,6,9,7,6,6,9,9,8,6,9,9,8,8,9,9,6,6,9,9,6,8,9,9,6,6,9,9,6,6,9,9,4,6,9,9,6,8,9,7,10,8,7,5,8,10,7,7,8,8,7,7,10,8,5,5,8,8,7,7,10,10,5,9,10,8,9,9,8,10,11,9,10,8,9,9,8,8,9,9,6,10,9,9,8,10,9,9,10,8,9,9,10,10,9,9,8,10,9,7,8,8,7,7,10,8,9,9,8,10,7,9,6,8,9,9,8,6,9,9,8,8,9,9,8,8,9,11,10,8,9,9,8,8,11,7,10,8,7,5,8,8,7,7,8,8,7,7,10,8,9,7,10,8,7,7,10,10,7,7,8,10,7,7,8,10,7,7,8,8,5,9,10,8,7,7,10,8,7,7,8,10,7,9,8,6,9,7,6,8,9,9,6,6,7,9,8,8,9,9,8,6,9,9,6,8,9,9,10,8,9,7,8,10,9,9,8,8,7,9,10,10,9,7,10,8,9,9,8,10,7,9,8,8,9,9,10,8,9,9,8,8,9,9,8,10,9,11,10,8,9,9,8,8,9,11,8,8,9,9,8,8,11,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,11,7,10,10,7,7,8,10,7,7,8,10,9,7,10,8,7,7,8,8,7,9,10,8,7,9,6,8,9,7,8,6,9,9,8,6,7,7,8,6,7,9,6,8,9,9,8,8,9,7,6,8,7,7,8,8,5,7,6,10,9,7,8,8,5,7,8,8,7,9,10,8,7,7,8,10,7,7,6,8,7,7,8,10,7,5,8,8,9,5,6,8,9,7,8,8,7,9,8,8,7,9,6,8,9,9,6,8,9,9,4,6,7,9,8,8,9,9,8,8,9,7,10,10,7,9,8,10,7,9,8,10,7,7,10,8,7,7,8,8,7,7,10,8,7,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,6,8,9,9,6,6,9,7,8,10,7,9,8,6,5,9,8,10,7,5,8,8,7,7,8,6,7,7,8,8,7,9,8,6,9,9,8,8,9,7,6,6,9,9,8,6,9,9,8,6,9,7,6,8,9,9,8,8,7,7,8,6,9,9,8,8,9,5,6,8,7,9,6,6,5,7,8,6,9,7,8,8,9,7,8,8,7,7,8,10,7,9,8,6,7,5,8,8,5,7,10,6,7,7,8,8,9,7,6,8,7,7,8,10,7,9,8,8,5,5,6,8,7,7,10,8,7,9,6,8,5,9,8,8,9,7,6,8,7,7,6,8,5,9,6,8,7,9,8,6,9,9,8,8,9,9,6,8,9,9,8,8,9,7,4,6,9,9,8,6,7,9,8,8,9,7,8,10,5,7,8,8,7,7,8,10,7,7,8,6,9,5,8,8,9,7,8,6,7,11,6,8,9,9,8,6,9,9,8,8,9,9,4,8,9,11,8,8,9,9,8,8,11,9,8,10,7,7,8,8,9,7,10,10,7,7,10,8,7,5,10,10,7,7,10,10,9,9,8,6,9,7,6,8,9,9,6,6,7,9,8,8,9,9,8,6,9,9,6,8,9,7,6,10,5,9,8,8,5,9,6,10,7,7,8,8,7,7,8,8,7,7,8,8,7,7,8,8,7,7,8,6,5,7,8,10,9,7,8,8,7,7,8,6,5,9,10,8,7,9,6,8,7,9,6,6,9,7,8,6,9,9,8,8,9,9,8,8,7,7,8,6,9,9,8,10,7,9,10,8,5,9,8,12,9,7,10,10,7,9,10,8,7,9,10,10,9,9,8,8,9,9,8,8,11,9,8,6,9,9,10,8,9,11,8,8,9,9,8,8,11,9,8,10,9,9,10,8,9,9,10,10,7,7,10,8,5,9,10,10,9,7,8,10,9,9,8,8,9,9,8,8,9,9,6,8,9,7,8,8,9,9,6,8,9,9,8,8,7,7,8,8,7,9,8,8,7,7,10,8,5,7,6,10,7,5,6,8,9,7,8,8,7,9,8,6,7,9,6,8,7,9,4,8,9,9,4,6,7,7,8,8,9,9,6,8,7,7,8,6,9,9,8,8,7,11,6,6,7,7,8,6,9,9,4,8,9,9,8,8,9,5,8,8,7,7,10,10,5,7,8,8,7,7,8,8,3,7,10,10,7,7,8,10,7,7,6,10,9,11,8,8,9,11,8,10,9,9,8,6,9,9,8,8,9,7,8,8,9,9,10,8,7,7,10,10,9,7,10,10,9,7,10,10,9,9,8,8,7,7,10,8,9,9,6,8,9,9,8,6,9,11,6,8,7,7,6,6,9,7,6,8,9,9,6,6,7,7,10,8,7,7,10,10,7,5,8,8,7,7,8,8,7,5,10,10,5,7,8,8,5,7,8,8,7,9,8,8,7,7,10,8,7,5,8,10,7,7,6,8,9,7,6,8,5,7,8,8,9,9,8,8,9,9,6,6,9,9,6,4,7,7,8,6,9,7,4,8,7,7,8,8,9,7,6,8,7,9,8,6,9,7,6,6,9,7,8,8,9,9,8,8,9,7,6,8,5,9,10,8,5,7,8,8,7,7,6,8,7,7,8,10,9,7,8,8,7,7,10,8,7,7,8,10,7,7,10,8,7,7,8,10,5,7,8,8,7,7,8,10,7,9,6,6,7,11,8,6,9,9,6,6,9,9,8,6,9,7,6,8,9,7,8,6,7,9,8,10,7,9,10,8,9,9,8,10,7,7,8,10,5,9,10,10,9,9,10,10,9,9,8,8,9,9,8,8,9,9,8,8,7,9,8,6,9,7,6,8,9,9,8,8,9,7,10,8,7,5,8,8,7,7,10,8,7,7,8,10,9,7,10,8,7,7,8,10,7,7,4,8,7,11,8,8,7,9,6,8,9,9,6,6,9,9,8,8,9,7,6,8,9,7,8,6,9,7,8,8,7,9,6,8,7,9,8,8,9,9,8,6,9,9,6,8,7,5,6,8,7,9,10,8,7,7,8,8,7,7,8,8,7,7,8,10,9,5,6,8,7,9,6,10,7,11,8,8,7,11,6,10,9,9,8,8,9,9,8,8,9,9,8,8,9,9,10,10,7,7,8,10,9,7,10,8,7,9,10,10,9,9,8,10,7,7,10,8,9,9,8,8,7,9,10,8,9,5,10,10,9,7,10,8,9,9,10,10,9,7,10,10,9,7,8,8,9,9,8,6,9,9,8,8,9,7,10,6,11,9,8,8,11,9,10,8,9,7,8,8,5,9,8,8,7,7,10,6,7,7,8,10,7,5,8,8,9,7,8,6,7,7,8,8,9,9,6,8,7,9,8,6,9,9,6,6,9,7,8,8,7,7,8,8,9,9,6,6,7,9,8,6,9,9,6,6,9,9,8,6,11,7,6,8,9,7,8,6,7,7,10,8,7,7,8,10,7,5,10,8,7,7,8,10,7,7,10,8,7,7,8,8,7,9,8,8,9,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,9,7,8,6,7,9,10,10,9,7,10,10,9,9,10,10,7,7,10,10,7,9,8,8,7,7,8,8,9,7,8,8,7,9,8,8,7,9,6,8,9,9,6,6,11,9,8,8,9,7,6,4,9,7,8,8,7,7,8,10,7,9,10,8,7,7,8,10,7,7,10,8,5,7,8,10,7,7,8,6,7,9,8,8,7,7,10,8,7,7,8,10,7,7,8,8,9,5,8,6,5,7,8,6,7,9,8,8,7,9,6,8,9,9,8,8,9,9,8,6,7,9,6,8,7,9,8,6,9,9,6,8,7,7,4,4,7,9,8,6,9,7,8,8,9,9,6,8,7,7,8,8,7,9,10,6,5,7,8,6,5,7,8,8,7,7,8,10,9,7,8,8,7,5,10,8,7,7,10,8,5,3,8,8,7,7,8,8,7,7,10,10,7,7,8,10,7,7,8,6,9,9,8,4,7,9,6,6,7,7,8,6,9,9,8,8,11,9,8,8,9,9,8,10,7,9,10,8,9,5,8,8,7,9,10,10,9,9,10,10,9,7,10,10,9,9,8,8,9,9,8,6,7,9,6,8,7,9,10,8,11,9,8,8,11,9,10,8,9,7,10,8,7,5,10,10,7,7,8,8,7,7,8,8,5,5,8,10,7,7,8,10,5,9,6,8,9,9,8,6,9,9,6,8,7,7,6,6,9,7,6,8,11,9,6,6,7,7,8,4,9,9,8,8,9,7,6,6,9,7,6,4,9,7,8,6,9,9,8,8,7,5,8,6,7,9,10,6,7,7,8,8,7,5,8,8,7,7,8,10,9,7,8,8,7,9,8,8,7,9,8,8,9,9,8,8,9,9,8,6,9,7,8,8,9,9,8,6,9,9,10,10,7,7,8,10,9,9,10,10,7,7,8,10,7,9,8,10,7,9,10,8,9,11,8,8,9,9,8,8,11,9,8,6,9,9,8,8,9,9,8,8,9,9,8,8,11,7,10,10,7,7,8,10,7,7,8,10,7,7,10,8,9,7,8,8,9,7,10,8,7,9,6,8,7,9,8,6,9,7,8,8,9,9,6,6,9,9,8,8,7,7,8,6,9,7,8,10,7,7,6,8,7,5,8,8,9,7,10,8,7,5,8,8,7,9,8,6,7,7,6,8,7,7,8,8,5,7,8,8,7,7,10,8,9,7,8,6,9,5,10,8,7,9,8,8,9,7,6,8,9,9,8,4,9,9,8,6,9,9,8,6,9,7,8,8,9,7,10,10,9,7,8,10,7,7,8,10,7,9,10,8,7,7,8,8,7,7,10,8,7,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,6,8,9,9,6,6,9,7,8,8,7,9,6,8,7,9,8,8,7,7,10,8,7,5,8,8,7,5,10,6,7,9,8,6,7,9,6,8,9,9,6,8,9,9,6,8,9,9,8,6,7,9,6,8,9,9,6,8,9,5,8,8,9,7,8,6,7,7,8,8,9,9,6,6,7,5,8,6,9,7,6,10,9,5,8,8,5,7,8,8,7,9,10,8,7,7,8,6,7,7,8,8,7,7,8,10,9,7,8,6,5,5,6,8,7,9,10,8,7,7,8,8,7,7,8,8,7,9,8,8,7,7,8,6,9,5,6,6,5,9,8,8,7,9,6,8,9,7,8,6,9,9,8,8,9,9,6,8,9,7,6,4,7,9,8,6,9,9,8,8,9,9,8,8,9,7,8,8,7,7,8,6,5,7,6,8,5,7,10,8,9,7,8,8,9,7,10,8,7,11,6,8,9,9,8,6,9,9,8,4,9,9,8,8,9,11,8,8,9,9,8,8,11,9,8,10,9,7,10,8,5,7,8,10,7,9,12,10,9,9,10,8,9,7,10,10,9,9,8,6,9,9,8,8,9,9,6,8,9,7,6,6,7,9,8,6,9,9,6,8,9,7,8,8,7,9,8,8,7,9,8,8,5,7,10,6,7,5,6,8,7,7,10,8,7,7,8,10,7,5,8,8,7,7,8,8,9,7,10,6,7,5,6,8,7,9,8,8,7,9,6,8,9,7,6,6,9,9,8,8,7,7,6,8,7,9,6,8,9,9,8,8,9,9,8,10,7,7,8,8,9,7,10,10,7,7,10,8,7,5,10,10,7,7,10,10,9,9,8,8,9,9,8,8,11,9,8,10,9,9,6,8,9,11,8,8,9,9,8,8,11,7,10,8,9,9,8,6,11,9,10,8,9,9,8,8,9,11,10,10,9,9,8,10,11,7,10,6,9,9,10,10,7,7,8,10,9,7,10,8,9,9,10,8,9,9,10,10,9,9,8,8,9,9,4,8,9,9,8,6,7,9,6,8,9,9,8,8,7,9,6,8,9,7,10,10,5,7,8,10,7,7,8,8,7,7,10,8,7,7,10,8,7,7,8,8,7,7,10,10,7,5,8,10,7,7,8,10,7,7,8,8,7,7,8,8,7,7,8,10,7,11,6,8,9,9,8,6,11,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,7,10,10,9,9,8,10,7,9,8,10,7,9,10,10,9,9,10,8,7,9,6,10,9,11,8,8,9,9,10,10,11,9,8,8,9,9,8,10,9,11,8,8,9,9,8,8,7,5,10,10,7,7,8,8,5,7,8,10,7,7,8,8,7,7,10,8,3,7,8,10,7,9,6,6,9,9,6,8,9,9,6,6,9,9,6,6,9,9,8,6,9,9,6,4,9,9,8,6,9,9,8,8,9,9,8,8,9,7,6,8,9,9,8,4,7,9,6,8,9,7,10,8,7,7,8,10,7,7,8,10,7,7,8,8,7,7,10,8,7,5,10,8,7,5,10,10,7,7,8,8,5,7,8,8,3,7,10,8,7,7,10,8,7,7,8,10,7,9,8,6,9,9,8,8,9,7,4,6,7,9,8,8,9,9,8,8,9,9,6,8,9,9,8,6,9,9,6,2,9,9,6,6,9,9,6,6,9,11,8,6,9,9,6,8,11,5,10,8,7,7,8,8,5,3,8,8,7,7,10,8,7,7,10,8,7,7,10,10,7,11,10,8,9,9,10,6,7,9,8,8,9,9,8,10,9,11,10,8,9,9,8,10,11,7,10,10,9,9,8,10,7,7,8,6,7,9,10,8,9,9,10,10,9,9,10,10,9,9,6,6,9,9,6,8,9,9,6,6,9,9,6,6,9,9,4,6,9,9,6,8,9,7,10,8,7,7,8,10,7,7,8,8,7,7,10,8,5,7,8,8,7,7,10,10,7,5,10,8,7,7,8,8,5,7,8,10,7,3,8,8,7,7,10,8,7,7,10,10,7,9,8,6,9,9,8,8,9,7,8,6,9,7,6,4,9,9,8,8,9,9,8,8,9,7,10,10,9,9,8,10,7,9,10,10,9,7,6,8,9,9,10,8,7,9,10,10,9,11,8,8,9,9,8,10,11,9,10,8,9,9,8,8,9,7,8,10,9,9,8,8,11,9,8,10,9,7,8,8,9,9,10,10,5,9,10,10,7,9,10,10,7,9,8,10,9,9,8,8,9,7,8,8,9,9,6,8,9,9,8,8,9,9,6,8,9,9,8,8,7,5,8,8,7,7,8,6,7,7,8,8,7,9,8,10,7,7,8,10,5,9,6,8,7,9,6,6,9,9,6,6,9,7,6,8,9,11,6,8,9,7,6,8,7,9,8,6,7,7,8,6,9,9,8,8,7,9,6,8,9,7,8,8,7,9,8,6,9,9,6,8,7,7,10,8,7,7,10,10,7,7,10,8,5,7,8,8,7,7,8,8,7,7,8,10,7,7,8,10,11,9,6,6,9,9,8,8,9,11,10,8,9,9,8,8,7,9,8,8,9,9,10,8,7,7,10,10,9,7,10,10,9,7,10,10,9,9,8,8,7,7,10,8,9,7,8,8,9,9,4,8,9,9,6,6,7,9,6,8,9,7,8,6,7,9,4,8,7,7,10,8,5,7,8,10,7,7,8,8,7,7,8,10,7,5,10,10,7,5,8,8,5,7,8,8,7,5,10,8,7,7,10,8,7,9,8,8,7,7,6,8,7,9,6,8,5,9,6,8,11,7,6,6,9,9,6,6,9,9,8,8,7,7,6,8,9,9,6,6,7,7,8,8,9,9,6,4,7,7,6,6,9,11,8,8,9,9,8,8,7,9,6,8,9,7,8,8,7,7,8,6,5,5,8,6,7,9,8,10,7,7,8,10,7,9,8,8,7,5,10,8,7,7,8,8,5,7,8,8,3,7,8,10,7,7,10,10,7,7,8,10,7,9,8,6,9,9,6,8,7,7,4,4,7,9,8,6,9,7,8,8,9,9,6,8,7,9,8,10,9,7,10,8,9,7,8,8,5,9,10,10,7,9,10,10,9,9,10,10,9,9,8,10,11,9,8,6,7,7,6,8,9,11,10,8,9,9,8,8,9,9,8,8,9,7,8,8,7,7,10,10,7,7,10,8,9,5,8,8,7,7,10,8,7,7,8,10,7,7,8,8,9,7,6,8,7,9,8,6,9,7,6,6,9,7,8,8,9,9,8,8,9,7,8,6,11,7,6,8,7,9,6,8,9,9,6,8,7,9,4,8,9,9,8,8,9,7,8,8,7,7,10,8,7,7,10,6,7,9,8,8,5,5,6,8,7,9,8,8,7,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,7,7,6,8,9,9,8,8,9,9,10,10,7,9,10,10,9,7,10,10,9,7,8,8,7,9,8,10,7,7,10,8,9,7,10,10,9,9,10,10,7,9,10,10,9,9,10,10,9,9,10,10,9,9,10,10,9,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,8,9,9,8,8,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,11,9,8,10,5,9,10,8,9,7,8,10,9,9,8,10,7,9,10,10,7,9,10,10,9,9,8,10,9,5,10,8,9,9,10,8,7,7,10,10,9,9,10,8,9,7,10,10,9,11,6,10,9,9,8,10,7,9,8,8,9,9,8,8,9,11,10,8,9,9,10,10,11,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,8,9,9,6,8,9,7,10,10,7,7,10,10,9,7,10,10,7,7,10,10,7,9,10,10,7,7,10,10,5,9,8,10,7,9,10,8,9,9,10,10,9,7,8,10,9,9,10,8,5,7,10,10,9,9,10,8,9,9,8,10,11,9,8,10,9,9,10,8,9,9,10,8,9,9,8,6,9,11,6,8,9,9,8,6,9,9,8,8,9,9,8,8,9,11,8,4,9,9,8,8,11,9,8,10,9,7,10,8,9,7,10,8,9,9,10,10,9,9,10,8,7,5,10,10,9,9,8,10,9,7,10,8,9,7,8,8,5,9,10,10,7,9,10,10,9,9,10,10,9,11,6,8,9,9,8,6,9,9,4,8,9,9,8,8,9,11,8,8,9,9,8,8,11,11,10,10,9,9,8,6,7,9,8,8,9,9,8,8,9,11,10,8,9,9,10,10,11,9,8,10,7,9,10,8,9,5,8,8,7,9,10,10,9,9,10,10,9,7,10,10,9,9,10,10,7,7,10,10,3,7,10,10,7,7,10,10,7,9,10,10,7,7,10,10,9,11,6,8,9,9,8,6,9,9,8,4,9,9,8,8,9,11,8,8,9,9,8,8,11,9,10,8,9,9,8,10,11,9,8,10,9,9,10,8,9,9,6,8,9,9,8,10,9,9,8,10,7,9,10,8,9,9,8,10,7,7,8,10,5,9,10,10,9,9,10,10,9,9,8,10,9,7,10,8,9,9,10,10,9,5,8,10,7,9,10,8,7,9,10,10,9,11,8,8,9,9,8,8,11,9,8,8,9,9,8,6,9,9,8,8,9,9,8,8,11,11,6,8,9,9,8,6,9,9,8,8,9,9,4,8,9,11,8,8,9,9,8,8,11,7,10,10,7,7,10,10,9,7,10,10,7,7,10,10,7,5,10,10,7,7,10,10,9,11,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,8,8,9,9,8,8,9,9,8,10,9,7,10,8,9,9,10,10,7,7,10,10,7,9,8,8,9,9,8,10,9,7,10,8,7,7,10,10,7,7,10,8,7,9,8,10,7,7,8,10,7,9,8,8,7,9,6,8,9,9,8,8,7,9,8,8,9,11,6,10,7,9,8,10,9,11,8,8,9,9,8,6,9,9,8,8,9,9,8,8,7,9,8,8,9,9,6,8,9,9,8,8,7,7,10,8,7,9,10,10,7,9,6,10,9,9,8,10,7,9,10,10,9,9,8,10,9,9,8,8,7,9,10,8,9,7,10,10,9,9,10,10,9,9,10,8,7,7,10,8,9,9,8,8,9,9,8,8,11,9,10,8,9,9,8,8,9,11,8,6,9,9,8,8,11,9,8,8,7,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,9,6,6,7,9,10,10,9,9,8,10,9,9,10,8,9,9,8,8,9,7,10,8,7,7,8,10,7,9,8,8,7,7,10,8,9,7,10,10,7,7,10,10,7,9,10,10,7,7,8,10,5,9,8,8,9,9,8,8,9,7,8,8,9,9,8,8,9,9,8,8,9,9,6,6,7,9,8,8,9,9,8,6,7,7,8,6,9,11,8,10,9,9,8,10,9,11,8,8,9,9,8,10,7,9,10,8,5,7,10,8,7,9,8,10,7,9,10,12,9,9,10,10,9,7,10,8,9,9,10,10,7,7,6,8,7,9,10,10,9,9,10,10,9,9,8,10,9,9,8,8,9,11,10,6,7,9,8,6,7,9,8,8,9,9,8,10,11,9,8,8,9,11,6,8,9,9,8,6,9,9,4,8,9,9,8,8,9,11,8,8,9,9,8,8,11,9,10,10,7,7,10,8,9,5,8,8,5,9,10,10,7,9,8,10,9,7,10,8,9,9,10,8,9,7,8,10,9,9,10,8,9,7,8,8,9,7,10,8,9,9,10,10,7,9,6,8,7,11,10,8,7,9,8,8,9,9,6,8,9,9,8,10,11,9,8,8,9,9,8,6,9,9,8,8,9,9,8,8,9,9,8,8,7,9,6,8,9,9,8,8,7,7,10,8,7,9,10,10,7,7,10,8,7,7,8,10,7,7,8,10,9,7,8,8,7,9,8,10,5,9,10,10,9,7,8,10,7,7,8,10,5,9,8,10,7,9,10,8,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,6,9,9,6,8,9,9,8,6,11,11,10,8,9,9,10,10,9,9,8,8,9,9,8,10,9,9,10,8,9,9,8,6,9,9,10,10,9,9,8,10,9,9,10,8,9,9,8,8,9,7,10,8,7,7,8,10,7,9,8,6,9,9,8,8,9,7,6,6,9,9,8,6,9,9,8,6,9,7,6,8,9,7,10,10,9,7,8,8,7,7,8,8,7,7,10,8,7,7,10,8,7,5,8,10,7,7,10,8,7,7,8,10,7,5,8,8,7,7,10,8,7,5,10,8,5,7,10,8,5,9,8,6,9,9,6,6,9,9,6,6,9,9,6,6,9,9,8,6,9,9,6,4,9,9,10,8,7,9,8,10,9,7,8,8,9,9,8,8,9,7,10,10,9,9,10,10,7,9,8,8,9,9,8,8,9,9,10,8,9,9,8,8,9,9,8,10,9,9,8,10,11,7,8,8,7,7,8,10,7,5,8,8,7,7,10,8,7,7,10,8,9,7,10,10,7,9,6,8,9,9,8,6,9,9,8,8,9,9,8,8,9,11,8,8,9,9,8,10,11,9,8,6,7,9,6,8,9,7,6,6,9,9,6,6,9,9,8,8,9,9,8,8,9,7,10,8,5,7,8,8,7,7,8,10,7,7,8,8,7,7,10,8,7,9,10,10,7,7,10,10,5,7,8,10,7,7,8,8,7,7,10,8,7,5,10,8,7,5,8,8,5,9,8,8,9,9,6,8,9,9,8,6,9,9,6,6,9,9,8,6,7,7,6,8,9,9,6,6,9,9,6,8,9,9,6,6,9,9,6,6,9,9,8,6,9,9,6,4,9,7,8,10,7,7,8,10,7,9,8,10,7,7,8,8,7,7,10,8,5,7,8,10,7,9,10,8,9,9,8,10,11,9,10,8,9,9,8,8,9,9,10,10,9,9,8,6,9,9,10,8,7,9,8,10,9,9,8,10,9,9,8,10,9,7,10,8,7,9,8,10,7,11,6,6,9,9,6,6,11,9,6,6,9,9,6,6,9,9,6,6,9,9,6,6,9,7,10,10,7,7,8,10,7,5,8,10,7,7,8,8,7,5,10,8,5,7,8,8,5,7,10,8,5,7,8,10,7,7,8,10,7,7,8,8,7,5,10,8,7,5,10,8,5,9,8,6,7,9,6,8,9,9,6,8,9,9,6,8,9,9,8,6,7,9,6,8,9,9,10,8,9,9,10,10,9,7,8,8,9,9,10,8,9,7,10,8,9,7,8,10,7,9,8,8,9,9,10,8,9,9,8,8,9,9,8,10,9,11,8,8,9,9,8,10,9,9,8,10,9,9,10,8,9,7,10,10,9,9,10,8,7,9,10,10,7,5,8,10,9,9,8,8,9,9,8,8,9,7,8,8,9,9,8,8,9,9,8,6,9,9,8,6,7,7,8,8,9,7,8,8,7,7,8,6,9,7,8,10,7,5,8,10,5,7,8,6,7,7,8,6,9,9,8,8,7,7,8,8,9,11,6,6,9,9,8,6,7,9,8,4,9,9,8,6,9,7,6,8,7,9,8,4,9,9,8,6,9,7,8,4,9,7,6,8,7,5,8,8,7,7,10,10,5,7,10,8,7,7,8,8,7,7,10,8,7,3,8,10,7,7,6,10,11,9,8,8,9,9,8,8,9,11,10,6,7,9,8,8,9,9,8,8,9,9,10,8,7,7,10,10,9,7,8,10,7,7,10,10,7,9,8,10,9,9,10,8,9,7,8,8,7,9,6,8,7,7,8,6,9,9,6,6,9,7,8,8,9,9,8,8,9,7,10,8,5,7,8,8,7,7,8,8,7,7,8,10,7,7,10,10,7,9,8,10,7,7,6,8,9,5,10,8,5,7,10,6,9,7,8,8,7,7,8,8,7,7,8,8,7,7,4,8,11,7,8,8,7,9,8,6,9,9,8,6,7,9,8,6,9,9,6,8,9,9,6,8,9,9,8,6,9,7,8,6,9,11,8,6,9,7,6,6,7,9,6,6,7,7,8,8,9,7,8,8,7,5,8,8,9,7,8,10,7,7,8,10,7,7,6,6,5,7,10,8,7,7,8,10,7,7,8,8,7,7,8,10,7,7,10,10,7,5,8,8,7,7,8,6,7,9,8,8,7,9,6,8,9,9,8,8,9,9,8,6,7,9,6,8,7,9,8,10,9,7,10,8,9,7,10,8,9,9,10,10,9,9,10,8,7,5,10,10,9,9,6,10,11,7,8,8,7,9,8,8,9,11,10,8,9,9,8,6,9,9,8,8,9,7,10,8,7,7,10,10,7,7,10,8,5,5,8,8,7,5,8,8,7,7,8,10,5,7,8,8,9,9,8,8,9,9,6,6,9,9,6,4,7,7,8,6,9,7,4,8,7,9,6,6,11,7,8,6,9,9,8,8,9,9,6,6,7,7,6,6,9,9,8,6,7,5,6,8,9,7,10,8,7,7,10,8,9,7,8,8,5,7,8,8,7,7,6,8,7,9,8,8,9,9,8,8,9,9,8,8,9,9,8,6,9,7,8,8,7,9,8,6,9,9,10,10,7,7,8,10,9,9,10,10,7,7,8,10,7,9,8,10,7,9,10,8,9,9,8,10,7,9,8,8,9,9,10,10,7,9,10,10,9,9,10,10,5,7,8,10,9,9,8,8,7,9,8,8,9,9,8,8,9,9,8,8,9,9,8,6,9,9,8,6,7,5,8,8,7,7,8,6,7,9,10,8,5,7,8,10,9,7,8,8,7,7,6,8,7,7,8,6,9,9,8,8,7,7,6,8,9,9,8,8,9,9,8,6,9,7,6,8,7,9,6,6,9,9,6,6,9,11,8,6,7,7,8,8,9,7,6,6,9,9,8,6,7,7,10,8,7,7,10,10,7,7,8,8,7,7,8,8,7,7,10,10,5,7,8,8,7,7,8,10,9,11,6,6,9,11,8,10,7,9,8,8,9,9,8,8,9,9,8,8,9,9,10,8,7,7,10,10,9,7,8,10,7,7,10,10,7,9,8,10,9,9,10,8,9,7,8,8,9,9,6,4,7,11,8,8,7,7,6,8,9,9,8,6,9,9,6,8,9,7,8,8,7,7,10,10,7,5,8,8,7,7,8,8,7,7,10,10,9,7,8,10,7,7,8,8,7,7,8,6,5,9,10,8,7,5,6,10,9,7,8,8,7,7,8,8,7,7,8,8,7,9,6,8,7,7,8,6,9,9,6,6,9,7,8,8,9,9,8,8,9,7,8,8,9,9,4,8,9,9,6,6,7,9,6,8,9,7,8,6,7,9,4,8,7,7,8,8,5,7,10,8,7,9,8,8,7,7,8,8,9,7,8,10,7,7,6,6,5,5,10,8,7,7,8,8,5,7,10,8,7,7,8,10,7,7,10,8,3,7,8,10,7,7,8,6,7,11,6,8,7,9,8,6,9,9,8,8,9,9,8,6,9,7,8,4,9,9,8,10,7,9,10,8,9,9,10,10,9,7,8,10,9,9,10,8,5,7,10,10,9,9,8,8,9,9,6,8,9,9,8,8,9,9,8,8,9,7,8,8,9,7,8,6,9,7,10,8,7,5,8,10,7,7,10,8,7,7,8,10,5,5,8,8,7,7,8,10,5,9,6,8,7,11,6,6,9,9,8,8,9,9,6,8,9,7,6,6,9,7,6,6,7,9,8,6,9,9,6,8,7,9,8,8,9,7,4,6,9,7,8,4,7,9,6,8,7,7,8,8,7,7,10,8,7,9,8,8,7,7,6,8,9,5,8,10,7,5,8,6,7,9,8,10,9,11,8,6,7,11,8,10,9,7,8,8,9,9,8,6,9,9,8,8,9,9,10,10,9,7,10,10,9,7,10,8,7,7,10,8,7,9,8,10,9,7,10,8,9,9,6,8,9,9,8,6,11,9,8,8,9,9,8,8,9,11,8,8,9,9,4,8,11,9,8,10,7,7,10,8,9,7,8,10,7,7,10,10,7,9,10,8,7,7,10,10,5,9,8,8,7,7,6,6,9,9,8,8,5,9,8,8,7,9,6,8,5,7,6,6,9,7,8,10,7,7,8,8,7,7,6,8,9,7,10,8,7,7,8,8,5,9,8,6,5,7,8,10,7,7,8,8,7,7,8,10,5,7,8,8,9,7,6,6,9,7,8,8,5,9,8,8,9,9,8,8,9,9,6,8,9,9,8,6,7,9,8,6,9,7,4,8,9,5,8,12,9,9,8,8,9,9,10,10,7,9,10,8,7,9,10,10,7,7,10,10,9,11,8,6,9,9,8,8,9,9,8,8,9,9,8,8,9,11,8,8,9,9,10,8,11,5,8,10,7,9,6,6,7,9,8,10,5,7,8,8,7,7,8,8,7,7,8,8,7,9,8,6,7,9,6,8,9,7,6,6,9,9,6,6,9,9,8,8,9,9,8,8,9,9,6,6,9,7,8,6,9,9,6,8,7,7,8,8,7,9,6,8,9,9,8,8,9,5,6,10,9,7,8,8,7,7,8,8,7,9,10,6,5,7,8,8,7,7,8,8,7,5,8,10,9,7,6,6,7,7,8,8,7,9,10,8,7,7,8,8,5,7,8,8,7,9,6,6,7,9,8,6,9,7,8,8,9,9,8,8,9,9,8,6,7,7,8,6,9,9,8,8,9,9,6,8,9,9,6,8,7,9,8,8,9,9,8,6,7,9,4,8,9,7,8,10,7,7,8,8,7,7,6,10,7,7,8,8,9,7,8,8,9,5,8,6,5,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,8,9,9,6,8,9,7,10,10,9,7,8,10,7,7,8,10,7,9,10,8,7,7,8,8,7,7,10,8,7,9,8,6,9,7,6,8,9,9,8,6,9,7,6,6,9,9,8,6,9,9,8,8,9,5,6,10,7,9,8,8,7,9,8,10,7,7,8,6,7,7,8,8,7,5,8,8,7,7,8,10,7,7,8,8,7,7,8,8,9,7,10,8,5,7,6,6,7,9,8,8,5,9,6,8,9,9,8,8,9,7,8,8,7,7,8,6,5,9,6,8,7,5,6,6,9,7,10,10,7,9,8,10,7,9,8,10,7,7,10,8,7,7,8,8,7,7,10,8,7,11,8,8,9,9,8,8,11,9,8,6,9,9,6,8,9,9,6,8,9,9,8,6,11,11,8,8,9,9,8,8,11,9,8,8,9,9,8,8,9,11,8,6,9,9,8,8,9,9,8,10,7,9,10,8,9,7,8,10,9,9,10,10,9,9,10,10,7,7,8,8,9,7,10,8,7,7,10,10,7,9,10,8,7,7,8,10,9,7,8,10,7,7,8,8,7,9,8,6,9,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,7,9,8,6,7,9,6,8,9,9,8,8,7,11,10,6,9,9,8,10,11,9,8,8,9,7,8,8,9,7,10,8,9,7,10,10,7,9,10,8,9,9,10,10,9,9,10,6,9,7,8,10,9,9,8,8,9,7,10,8,9,9,8,10,7,7,10,10,7,9,8,10,9,9,10,10,9,9,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,8,10,9,9,8,8,11,9,8,8,9,9,8,6,7,11,10,8,9,7,6,10,11,9,8,8,9,9,8,8,9,9,10,8,7,9,8,10,9,7,8,8,9,9,8,8,9,7,10,10,9,9,10,10,7,9,8,10,9,7,10,8,5,9,12,8,9,7,8,10,9,9,10,10,7,7,10,10,9,9,6,8,11,7,10,8,7,9,10,6,11,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,7,8,8,9,9,8,8,9,9,8,8,9,9,6,8,9,9,6,8,7,9,8,8,7,7,10,8,9,7,10,10,7,7,10,10,7,9,10,10,7,7,8,10,5,7,10,8,9,9,10,10,7,9,10,10,9,7,8,10,9,9,10,6,7,9,8,10,9,9,8,6,9,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,7,8,6,7,11,6,8,9,9,8,6,9,9,8,8,9,9,8,8,9,11,8,4,9,9,8,8,11,9,8,10,9,5,10,10,9,7,10,8,7,7,10,10,9,9,8,8,7,5,10,8,9,9,10,10,9,9,8,10,9,9,8,8,7,9,8,8,7,7,10,10,9,9,8,10,7,9,8,8,9,9,8,8,9,9,8,8,9,7,8,8,9,9,6,8,9,9,6,8,7,9,8,8,11,9,10,6,7,9,10,8,11,9,6,8,9,9,8,8,7,9,8,8,9,7,10,8,9,7,10,10,7,7,10,8,9,7,8,10,7,7,8,10,7,7,8,8,7,9,10,10,7,7,10,8,9,9,10,10,9,5,8,10,7,9,8,8,5,7,10,8,9,11,8,8,9,9,6,8,11,9,8,8,9,9,8,6,9,9,6,8,9,9,8,6,11,9,10,10,7,7,10,10,7,7,10,10,7,7,10,10,7,9,10,10,7,7,10,10,5,11,8,10,9,9,8,8,9,9,8,8,9,9,8,8,9,11,8,8,9,9,6,8,11,11,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,6,6,9,9,8,6,9,9,10,10,9,7,10,10,9,9,10,10,7,7,10,10,7,9,8,8,7,7,8,8,9,9,10,10,7,9,10,10,9,7,8,10,7,9,10,10,7,9,8,10,7,7,8,8,9,11,10,8,9,9,8,8,11,9,8,10,9,9,10,8,9,11,8,8,9,9,8,8,7,11,8,6,9,9,8,8,9,9,8,8,9,9,8,8,9,11,8,8,9,9,10,8,11,7,10,10,9,9,10,10,7,9,10,10,9,9,10,10,9,9,10,10,9,9,10,10,11,9,10,8,7,7,10,10,9,7,8,10,7,7,10,10,7,9,8,10,9,9,10,8,9,9,8,10,9,9,8,8,9,9,8,8,9,9,8,8,9,9,8,8,9,9,10,10,11,9,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,8,10,9,9,8,8,11,9,10,8,7,7,10,10,9,7,8,10,7,7,10,10,7,9,8,10,9,9,10,8,9,9,10,8,7,7,10,10,9,7,10,10,9,7,10,10,9,9,8,8,7,7,10,8,9,9,8,8,9,9,8,8,11,9,10,8,9,9,8,8,9,11,8,6,9,9,8,8,11,11,8,8,9,9,8,10,11,9,8,10,9,9,10,8,9,11,8,8,9,9,8,8,7,9,10,10,9,7,10,10,9,9,10,10,7,7,10,10,7,9,8,8,7,7,8,8,9,7,10,10,7,7,10,10,9,7,10,10,7,7,10,10,7,9,10,10,7,7,10,10,5,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,6,8,9,9,6,6,9,9,8,10,9,9,8,8,9,9,8,8,9,9,8,8,9,9,10,8,9,9,10,8,11,9,10,8,7,7,10,10,9,7,10,10,9,7,10,10,9,9,8,8,7,7,10,8,9,9,10,10,7,9,10,10,9,7,8,10,7,9,10,10,7,9,8,10,7,7,8,8,9,11,8,8,9,9,8,8,11,9,6,8,9,9,8,8,9,11,6,6,9,9,8,6,9,11,8,6,9,9,8,8,11,9,8,8,9,9,8,8,9,11,6,8,9,9,6,6,9,7,10,10,7,7,10,10,7,7,10,10,7,7,10,10,7,7,10,10,7,7,10,10,7};
const char cube_algorithm::table7[] = {1,2,4,5,5,4,2,3,5,6,6,5,5,6,4,5,5,6,6,5,5,4,6,5,5,6,4,5,5,6,6,7,3,4,4,5,3,4,2,3,5,6,4,5,3,4,6,7,5,4,6,5,5,6,6,5,7,6,6,7,7,6,6,5,7,6,6,7,5,6,6,7,5,4,6,5,5,6,6,5,5,6,4,5,5,6,4,5,5,6,4,5,3,4,4,5,5,4,6,5,5,6,6,5,5,4,6,5,5,4,4,3,5,4,6,5,5,4,6,5,5,6,6,5,5,4,6,7,5,4,4,3,5,4,4,3,7,6,4,3,3,2,6,5,5,6,4,3,3,2,6,7,5,4,4,3,5,4,6,5,5,6,4,3,5,4,6,7,7,6,6,5,5,6,6,5,5,6,4,5,5,4,6,5,3,4,6,5,5,6,4,5,5,4,4,5,3,4,6,5,5,6,4,5,5,6,6,5,5,4,4,5,5,6,6,5,7,6,6,7,5,6,6,5,5,6,4,5,7,6,6,7,5,6,6,7,5,6,6,7,7,6,6,7,5,6,6,7,7,6,6,5,5,6,6,5,5,4,6,7,7,6,6,5,5,6,6,5,5,4,4,5,5,4,4,3,5,6,6,5,5,4,6,5,5,4,6,5,5,4,4,3,5,4,6,5,5,4,6,5,5,4,6,5,5,6,6,5,5,6,4,5,7,6,6,5,7,6,6,7,5,6,6,7,7,6,6,7,5,6,6,5,5,6,4,5,5,6,2,3,3,4,6,7,3,4,4,5,3,4,4,5,7,6,4,5,5,6,6,5,5,6,4,5,5,6,4,5,3,4,4,5,5,6,4,5,5,6,6,5,5,6,4,5,7,6,6,5,5,6,6,5,5,4,6,5,5,6,6,5,5,4,4,5,5,6,4,3,7,6,6,5,7,6,6,5,5,4,6,5,7,6,6,5,7,6,6,7,7,6,6,5,7,6,6,5,7,6,6,5,7,6,6,7,5,4,6,5,5,6,6,5,7,6,6,7,5,6,6,5,5,4,4,5,5,6,6,5,5,4,6,5,5,6,4,3,5,4,4,5,5,6,4,5,5,6,4,5,5,6,6,5,3,4,4,5,5,4,4,5,5,6,6,5,5,6,6,7,7,6,4,5,5,6,6,5,5,6,6,7,7,6,6,5,7,6,6,7,7,6,6,7,5,6,6,5,7,6,6,7,5,6,6,7,7,6,4,5,5,6,6,5,7,6,8,7,7,8,6,5,7,6,6,7,7,6,8,7,7,8,6,7,7,8,8,7};
const int cube_algorithm::tablesize[8] = {1,4096,  6561,4096,  256,1536,  13824,576};

cube_algorithm::cube_algorithm() : _mode_o(1) {
    tables[0] = table0;
    tables[1] = table1;
    tables[2] = table2;
    tables[3] = table3;
    tables[4] = table4;
    tables[5] = table5;
    tables[6] = table6;
    tables[7] = table7;
    _output = err_prefix + "no arguments!";
}

string cube_algorithm::solve() {
    if (_output.find(cube_algorithm::err_prefix) == 0) {
        return _output;
    }
    // internal order
    string ifaces = "FBRLUD";
    // F=0,B=1,R=2,L=3,U=4,D=5, index:move-face, value:current-face
    int faces_mc[6] = {0, 1, 2, 3, 4, 5};
    // index:current-face, value:move-face
    int faces_cm[6] = {0, 1, 2, 3, 4, 5};
    ostringstream os;
    for (phase = 0; phase < 8; phase += 2) {
        int j = 0;
        // try each depth till solved
        for(; !searchphase(j, 0, 9); j++);
        // output result of this phase
        for(int i = 0; i < j; i++) {
            if (_mode_o == 0) {
                os << ifaces.substr(move[i], 1) << moveamount[i];
            } else {
                os << tosrt(move[i], moveamount[i], faces_mc, faces_cm);
            }
        }
    }
    _output = compactstep(os.str());
    return _output;
}

cube_algorithm& cube_algorithm::set_input(string input) {
    _output = "";

    // argument check
    if (input.length() != 54) {
        _output = err_prefix + "arguments error!";
        return *this;
    }
    string faces = input.substr(18, 1) + input.substr(0, 1) + input.substr(9, 1) +
                   input.substr(36, 1) + input.substr(45, 1) + input.substr(27, 1);
    int l = 0;
    for (int i = 0; i < 20; i++) {
        int f = 0, pc = 0, k = 0, mor = 0;
        for (; f < val[i]; f++) {
            size_t j = faces.find(input[imap[l++]]);
            if (j == string::npos) {
                _output = err_prefix + "arguments error!";
                return *this;
            }
            // keep track of principal facelet for orientation
            if ((int)j > k) {
                k = (int)j;
                mor = f;
            }
            //construct bit hash code
            pc += 1<<j;
        }
        // find which cubelet it belongs, i.e. the label for this piece
        for (f = 0; f < 20; f++) {
            if (pc == bithash[f] - 64)
                break;
        }
        // store piece
        pos[order[i] - CHAROFFSET] = f;
        ori[order[i] - CHAROFFSET] = mor;
    }
    return *this;
}

cube_algorithm& cube_algorithm::set_input(char* buf) {
    _output = "";

    // argument check
    if (buf == NULL || string(buf).length() != 67) {
        _output = err_prefix + "arguments error!";
        return *this;
    }
    char *argv[20];
    int j = 0;
    for (int i = 0; i < 19; i++) {
        argv[i] = buf + j;
        j = j + val[i];
        if (buf[j] == ' ') {
            buf[j] = '\0';
        } else {
            _output = err_prefix + "arguments error!";
            return *this;
        }
        j++;
    }
    argv[19] = buf + j;
    return set_input(20, argv);
}

cube_algorithm& cube_algorithm::set_input(int argc, char **argv) {
    _output = "";

    // argument check
    if (argc != 20) {
        _output = err_prefix + "arguments error!";
        return *this;
    }
    string faces = "RLFBUD";
    for (int i = 0; i < 20; i++) {
        int f = 0, pc = 0, k = 0, mor = 0;
        if (argv[i] == NULL || (int)string(argv[i]).length() != val[i]) {
            _output = err_prefix + "arguments error!";
            return *this;
        }
        for (; f < val[i]; f++) {
            size_t j = faces.find(argv[i][f]);
            if (j == string::npos) {
                _output = err_prefix + "arguments error!";
                return *this;
            }
            // keep track of principal facelet for orientation
            if ((int)j > k) {
                k = (int)j;
                mor = f;
            }
            //construct bit hash code
            pc += 1<<j;
        }
        // find which cubelet it belongs, i.e. the label for this piece
        for (f = 0; f < 20; f++) {
            if (pc == bithash[f] - 64)
                break;
        }
        // store piece
        pos[order[i] - CHAROFFSET] = f;
        ori[order[i] - CHAROFFSET] = mor;
    }
    return *this;
}

cube_algorithm& cube_algorithm::set_mode_o(int mode) {
    _mode_o = mode;
    return *this;
}

string cube_algorithm::compactstep(string movestep) {
    string ret = "";
    char lastchar[3] = {'\0', '0', '\0'};
    int len = movestep.length();
    for (int i = 0; i < len; i+=2) {
        if (movestep[i] == lastchar[0]) {
            lastchar[1] = (lastchar[1] - '0' + movestep[i + 1] - '0')%4 + '0';
        } else {
            ret = ret + lastchar;
            lastchar[0] = movestep[i];
            lastchar[1] = movestep[i + 1];
        }
    }
    ret = ret + lastchar;
    return ret;
}

void cube_algorithm::rollorspin(int step, const int ord[], int faces_mc[], int faces_cm[]) {
    int i = 0;
    for (; i < step; i++) {
        int tmp = faces_cm[ord[3]];
        faces_cm[ord[3]] = faces_cm[ord[2]];
        faces_cm[ord[2]] = faces_cm[ord[1]];
        faces_cm[ord[1]] = faces_cm[ord[0]];
        faces_cm[ord[0]] = tmp;
    }
    for (i = 0; i < 6; i++){
        faces_mc[faces_cm[i]] = i;
    }
}

string cube_algorithm::tosrt(int mi, int step, int faces_mc[], int faces_cm[]) {
    string retstr;
    switch (faces_mc[mi]) {
    case 0:
        rollorspin(2, order_s, faces_mc, faces_cm);
        rollorspin(1, order_r, faces_mc, faces_cm);
        retstr = "S2R1";
        break;
    case 1:
        rollorspin(1, order_r, faces_mc, faces_cm);
        retstr = "R1";
        break;
    case 2:
        rollorspin(1, order_s, faces_mc, faces_cm);
        rollorspin(1, order_r, faces_mc, faces_cm);
        retstr = "S1R1";
        break;
    case 3:
        rollorspin(3, order_s, faces_mc, faces_cm);
        rollorspin(1, order_r, faces_mc, faces_cm);
        retstr = "S3R1";
        break;
    case 4:
        rollorspin(2, order_r, faces_mc, faces_cm);
        retstr = "R2";
        break;
    default:
        break;
    }
    if (step == 1) {
        retstr += "T1";
    } else if (step == 2) {
        retstr += "T2";
    } else {
        retstr += "T3";
    }
    return retstr;
}

// Cycles 4 pieces in array p, the piece indices given by a[0..3].
void cube_algorithm::cycle(char* p, const char* a) {
    char temp = p[a[3] - CHAROFFSET];
    p[a[3] - CHAROFFSET] = p[a[2] - CHAROFFSET];
    p[a[2] - CHAROFFSET] = p[a[1] - CHAROFFSET];
    p[a[1] - CHAROFFSET] = p[*a - CHAROFFSET];
    p[*a - CHAROFFSET] = temp;
}

// twists i-th piece a+1 times.
void cube_algorithm::twist(int i, int a) {
    i -= CHAROFFSET;
    ori[i] = (ori[i] + a + 1)%val[i];
}

// convert permutation of 4 chars to a number in range 0..23
int cube_algorithm::permtonum(char* p) {
    int n = 0;
    int a = 0;
    for (; a<4; a++) {
        int b = a;
        n *= 4 - a;
        for (; ++b<4;)
            if (p[b] < p[a]) n++;
    }
    return n;
}

// get index of cube position from table t
int cube_algorithm::getposition(int t) {
    int i = -1, n = 0;
    switch(t) {
    // case 0 does nothing so returns 0
    case 1: //edgeflip
        // 12 bits, set bit if edge is flipped
        for (; ++i < 12;) n += ori[i]<<i;
        break;
    case 2: //cornertwist
        // get base 3 number of 8 digits - each digit is corner twist
        for (i = 20; --i > 11;) n = n*3 + ori[i];
        break;
    case 3: //middle edge choice
        // 12 bits, set bit if edge belongs in Um middle slice
        for (; ++i < 12;) n += (pos[i]&8) ? (1<<i) : 0;
        break;
    case 4: //ud slice choice
        // 8 bits, set bit if UD edge belongs in Fm middle slice
        for (; ++i < 8;) n += (pos[i]&4) ? (1<<i) : 0;
        break;
    case 5: //tetrad choice, twist and parity
    {
        int corn[8], j, k, l, corn2[4];
        // 8 bits, set bit if corner belongs in second tetrad.
        // also separate pieces for twist/parity determination
        k = j = 0;
        for (; ++i < 8;)
            if ((l = pos[i+12] - 12)&4) {
                corn[l] = k++;
                n += 1<<i;
            } else corn[j++] = l;
        // Find permutation of second tetrad after solving first
        for (i = 0; i < 4; i++) corn2[i] = corn[4+corn[i]];
        // Solve one piece of second tetrad
        for (; --i;) corn2[i] ^= corn2[0];

        // encode parity/tetrad twist
        n = n*6 + corn2[1] * 2 - 2;
        if (corn2[3] < corn2[2]) n++;
        break;
    }
    case 6://two edge and one corner orbit, permutation
        n = permtonum(pos)*576 + permtonum(pos + 4) * 24 + permtonum(pos + 12);
        break;
    case 7://one edge and one corner orbit, permutation
        n = permtonum(pos + 8)*24 + permtonum(pos + 16);
        break;
    }
    return n;
}

// do a clockwise quarter turn cube move
void cube_algorithm::domove(int m) {
    const char* p = perm + 8 * m;
    int i = 8;
    //cycle the edges
    cycle(pos, p);
    cycle(ori, p);
    //cycle the corners
    cycle(pos, p+4);
    cycle(ori, p+4);
    //twist corners if RLFB
    if (m < 4)
        for (; --i>3;) twist(p[i], i&1);
    //flip edges if FB
    if (m < 2)
        for (i=4; i--;) twist(p[i], 0);
}

// Pruned tree search. recursive.
int cube_algorithm::searchphase(int movesleft, int movesdone, int lastmove) {
    int i = 6;
    // prune - position must still be solvable in the remaining moves available
    if (tables[phase  ][getposition(phase  )] - 1 > movesleft ||
        tables[phase+1][getposition(phase+1)] - 1 > movesleft ) return 0;

    // If no moves left to do, we have solved this phase
    if (!movesleft) return 1;

    // not solved. try each face move
    for (; i--;) {
        // do not repeat same face, nor do opposite after DLB.
        if ((i - lastmove) && ((i - lastmove + 1) || (i|1))) {
            int j = 0;
            move[movesdone] = i;
            // try 1,2,3 quarter turns of that face
            for (; ++j <4;) {
                // do move and remember it
                domove(i);
                moveamount[movesdone] = j;
                //Check if phase only allows half moves of this face
                if ((j==2 || i>=phase ) &&
                    //search on
                    searchphase(movesleft - 1, movesdone + 1, i)) return 1;
            }
            // put face back to original position.
            domove(i);
        }
    }
    // no solution found
    return 0;
}
